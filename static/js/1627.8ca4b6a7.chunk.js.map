{"version":3,"file":"static/js/1627.8ca4b6a7.chunk.js","mappings":"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","sources":["views/screens/NXPRoutingGuide/User/Component/AddUserInformation/AddNxpUser.js","views/pages/NXPRoutingGuide/NxpUserPage.jsx","views/components/Inputs/FormInputPassword.jsx","views/screens/NXPRoutingGuide/User/Component/AddUserInformation/AddUserInformation.jsx","views/screens/NXPRoutingGuide/User/Component/AddUserInformation/AddNxpUserTab.jsx","views/screens/NXPRoutingGuide/User/Component/NXPClientCodeSelector.jsx","views/screens/NXPRoutingGuide/User/Component/NXPUserTypeSelector.jsx"],"sourcesContent":["import { Col, Form, Row } from \"antd\";\r\nimport React, { useState, useMemo, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FormInput from \"../../../../../components/Inputs/FormInput\";\r\nimport Paper from \"../../../../../components/Paper/Paper\";\r\nimport SaveCancelButtons from \"../../../../Shipment/components/SaveCancelButtons\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\r\nimport {\r\n  createRoutingGuideInClear,\r\n  createRoutingGuideUserInClear,\r\n  createRoutingGuideUserInProgress,\r\n  getNXPUserSearchInClearData,\r\n  getNXPUserSearchInProgress,\r\n} from \"../../../../../../redux/RoutingGuide/RoutingGuideAction\";\r\n\r\nimport AddNxpUserTabs from \"./AddNxpUserTab\";\r\nimport ToggleSwitch from \"../../../../../components/Switch/ToggleSwitch\";\r\nimport HiddenFormInput from \"../../../../../components/Inputs/HiddenFormInput\";\r\nimport PrimaryLabel from \"../../../../../components/Labels/PrimaryLabel\";\r\nimport FormLabel from \"../../../../../components/Labels/FormLabel\";\r\n\r\nexport default function AddNxpUser() {\r\n  const { pathname: activeTab } = useLocation();\r\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\r\n  const { t } = useTranslation([namespace, \"translation\"]);\r\n  const [activeKey, setActiveKey] = useState([\"1\"]);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { createRoutingGuideUser } = useSelector((state) => state?.routingGuide);\r\n  const [routingGuideForm] = Form.useForm();\r\n  const UserStatus = Form.useWatch(\"UserStatus\", routingGuideForm);\r\n\r\n  useEffect(() => {\r\n    if (createRoutingGuideUser?.data === \"Success\") {\r\n      dispatch(createRoutingGuideUserInClear());\r\n      dispatch(getNXPUserSearchInClearData());\r\n      dispatch(getNXPUserSearchInProgress());\r\n      navigate(-1);\r\n    }\r\n  }, [createRoutingGuideUser]);\r\n\r\n  const handleFormProviderSubmit = async (submittedForm) => {\r\n    if (submittedForm === \"saveButtonForm\") {\r\n      routingGuideForm.validateFields().then(\r\n        (response) => {\r\n          handleSubmit();\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const formValues = routingGuideForm.getFieldsValue();\r\n      const payload = {\r\n        UserId: 0,\r\n        UserTypeDesc: null,\r\n        UserTypeLogin: null,\r\n        ClientCodeDesc: null,\r\n        CountryName: null,\r\n        StateName: null,\r\n        OldPassword: null,\r\n        IsAccepted: null,\r\n        UserName: formValues.UserNameInput,\r\n        ...formValues,\r\n        UserStatus: formValues?.UserStatus === true ? \"A\" : \"I\",\r\n      };\r\n      dispatch(createRoutingGuideUserInProgress(payload));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Provider\r\n      className={\"overflow-hidden h-100\"}\r\n      onFormFinish={handleFormProviderSubmit}\r\n    >\r\n      <Row\r\n        className={\"flex-direction-column flex-nowrap overflow-hidden h-100\"}\r\n      >\r\n        <Col className=\"mb-15\">\r\n          <Paper className={\"p-15 border-radius-bottom-none\"}>\r\n            <Row align=\"middle\" justify=\"space-between\">\r\n              <Col>\r\n                <PrimaryLabel className=\"dark-header-text\">\r\n                  Add NPX User\r\n                </PrimaryLabel>\r\n              </Col>\r\n              <Col className=\"d-flex gap-1 align-items-center\">\r\n                <Form\r\n                  initialValues={{\r\n                    UserStatus: true,\r\n                  }}\r\n                  form={routingGuideForm}\r\n                  name={\"routingGuideForm\"}\r\n                >\r\n                  <div className=\"d-flex gap-half\">\r\n                    <FormLabel>User Status</FormLabel>\r\n                    <ToggleSwitch\r\n                      checked={UserStatus}\r\n                      checkedChildren={\"Active\"}\r\n                      unCheckedChildren={\"InActive\"}\r\n                      onClick={() =>\r\n                        routingGuideForm.setFieldValue(\r\n                          \"UserStatus\",\r\n                          !UserStatus\r\n                        )\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <HiddenFormInput name={\"UserStatus\"} />\r\n                </Form>\r\n                <Form name=\"saveButtonForm\">\r\n                  <SaveCancelButtons\r\n                    onSave={() => {}}\r\n                    onCancel={() => navigate(-1)}\r\n                  />\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Paper>\r\n        </Col>\r\n        <Col className=\"flex-1 custom-scroll-bar\">\r\n          <AddNxpUserTabs\r\n            routingGuideForm={routingGuideForm}\r\n            activeKey={activeKey}\r\n            setActiveKey={setActiveKey}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Form.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WithFilter from \"../../screens/common/WithFilter\";\r\nimport AddNxpUser from \"../../screens/NXPRoutingGuide/User/Component/AddUserInformation/AddNxpUser\";\r\n\r\nfunction NxpUserPage() {\r\n  return <WithFilter contentElement={<AddNxpUser />} />;\r\n}\r\nexport default NxpUserPage;","import React from \"react\";\nimport { Form, Input } from \"antd\";\nimport { isRequiredField } from \"../../../utilz/utilz\";\n\nconst FormInputPassword = ({\n  placeholder = \"\",\n  label,\n  editMode = false,\n  forFilter = false,\n  margin = \"mb-15\",\n  singleLineMode = false,\n  name = `testFiled-${Math.random()}`,\n  rules = [],\n  colon = false,\n  inverMode = false,\n}) => {\n  return (\n    <>\n      <Form.Item\n        className={`${inverMode ? \"invert-mode\" : \"\"} ${margin} ${\n          singleLineMode ? \"single-line-mode\" : \"\"\n        } form-input-container form-input-password ${\n          !editMode ? \"edit-mode-off\" : \"\"\n        }`}\n        name={name}\n        rules={rules}\n        {...(label\n          ? {\n              label: (\n                <span>\n                  {label}\n                  {rules.length > 0 && isRequiredField(rules) && (\n                    <span className=\"required\">*</span>\n                  )}\n                </span>\n              ),\n            }\n          : {})}\n        labelCol={10}\n        colon={colon}\n      >\n        <Input.Password\n          readOnly={!editMode}\n          placeholder={placeholder}\n          className={`${forFilter ? \"filter-input\" : \"form-input\"} `}\n          id={name}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default FormInputPassword;\n","import { Col, Form, Row, Button } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { t } from \"i18next\";\r\nimport FormInput from \"../../../../../components/Inputs/FormInput\";\r\nimport NXPUserTypeSelector from \"../NXPUserTypeSelector\";\r\nimport CountrySelector from \"./../../../../../components/Selectors/CountrySelector\";\r\nimport StateSelector from \"./../../../../../components/Selectors/StateSelector\";\r\nimport CitySelector from \"./../../../../../components/Selectors/CitySelector\";\r\nimport FormInputPassword from \"./../../../../../components/Inputs/FormInputPassword\";\r\nimport NXPClientCodeSelector from \"../NXPClientCodeSelector\";\r\nimport PostalCodeInput from \"./../../../../../components/Selectors/PostalCodeInput\";\r\n\r\nconst NpxUserInformationForm = ({ form, selectedItems = {} }) => {\r\n  const countryCode = Form.useWatch(\"CountryCode\", form);\r\n  const state = Form.useWatch(\"State\", form);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(selectedItems).length > 0) {\r\n      form.setFieldsValue({\r\n        UserNameInput: selectedItems?.userName || \"\",\r\n        UserTypeId: selectedItems?.userTypeId || \"\",\r\n        FirstName: selectedItems?.firstName || \"\",\r\n        LastName: selectedItems?.lastName || \"\",\r\n        Email: selectedItems?.email || \"\",\r\n        CompanyName: selectedItems?.companyName || \"\",\r\n        ClientCode: selectedItems?.clientCode?.trim() || \"\",\r\n        CountryCode: selectedItems?.countryCode?.trim() || \"\",\r\n        State: selectedItems?.state?.trim() || \"\",\r\n        City: selectedItems?.city?.trim() || \"\",\r\n        PostalCode: selectedItems?.postal?.trim() || \"\",\r\n        Password: selectedItems?.password?.trim() || \"\",\r\n      });\r\n    }\r\n  }, [selectedItems]);\r\n\r\n  const handleZipDetails = (data) => {\r\n    if (data) {\r\n      form.setFieldsValue({\r\n        State: data?.state?.trim(),\r\n        City: data?.city?.trim(),\r\n        CountryCode: data?.countryCode?.trim(),\r\n        PostalCode: data?.zip?.trim(),\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeCountryHandler = () => {\r\n    form.setFieldsValue({\r\n      State: undefined,\r\n      City: undefined,\r\n      PostalCode: undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form form={form} initialValues={{ editMode: false }}>\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"User Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"UserNameInput\"}\r\n            placeholder={\"User Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"User name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <NXPUserTypeSelector\r\n            margin={\"mb-15\"}\r\n            editMode={true}\r\n            label={t(\"translation:default.fields.userType.label\")}\r\n            name={\"UserTypeId\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"User Type is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"First Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"FirstName\"}\r\n            placeholder={\"First Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"First Name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <FormInput\r\n            label={\"Last Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"LastName\"}\r\n            placeholder={\"Last Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Last Name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"Email\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"Email\"}\r\n            placeholder={\"Email\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Email is required\",\r\n              },\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  const validateEmail = (email) => {\r\n                    return String(email)\r\n                      .toLowerCase()\r\n                      .match(\r\n                        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n                      );\r\n                  };\r\n                  if (validateEmail(value)) {\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.reject(\r\n                      new Error(\"Please enter the correct email address\")\r\n                    );\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <FormInputPassword\r\n            label={\"Password\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"Password\"}\r\n            placeholder={\"Password\"}\r\n            maxLength={16}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Password is required\",\r\n              },\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  \r\n                  if (value.length <= 16) {\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.reject(\r\n                      new Error(\"Password max length is 16\")\r\n                    );\r\n                  }\r\n                },\r\n              })\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"Company\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"CompanyName\"}\r\n            placeholder={\"Company\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Company is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <NXPClientCodeSelector\r\n            margin={\"mb-15\"}\r\n            editMode={true}\r\n            label={\"Client Code\"}\r\n            name={\"ClientCode\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Client is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <CountrySelector\r\n            name={\"CountryCode\"}\r\n            onChange={onChangeCountryHandler}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Country is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <StateSelector\r\n            name={\"State\"}\r\n            countryCode={countryCode}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"State is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <CitySelector\r\n            label={\"City\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"City\"}\r\n            placeholder={t(\"translation:default.fields.city.placeholder\")}\r\n            countryCode={countryCode}\r\n            stateCode={state}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"City is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <PostalCodeInput\r\n            label={t(\"translation:default.fields.postalCode.label\")}\r\n            margin={\"mb-15\"}\r\n            name={`PostalCode`}\r\n            placeholder={t(\"translation:default.fields.postalCode.placeholder\")}\r\n            editMode={true}\r\n            handleZipDetails={handleZipDetails}\r\n            countryCode={countryCode}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NpxUserInformationForm;\r\n","import { Col, Form, Row } from \"antd\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport SvgConverter from \"../../../../../components/Common/SvgConverter\";\r\nimport { ReactComponent as RoutingGuideIcon } from \"./../../../../../../assets/icons/file-fold.svg\";\r\nimport { ReactComponent as TruckIcon } from \"./../../../../../../assets/icons/truck.svg\";\r\nimport CollapsiblePanel from \"../../../../../components/Tabs/CollapsiblePanel\";\r\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\r\nimport FormSelectBox from \"../../../../../components/Inputs/FormSelectBox\";\r\nimport { NXP_STATUS_OPTIONS, STATUS_OPTIONS } from \"../../../../../../contants/common\";\r\nimport NpxUserInformationForm from \"./AddUserInformation\";\r\n\r\nconst AddNxpUserTabs = ({ routingGuideForm, activeKey, setActiveKey, selectedItems = {} }) => {\r\n  const { pathname: activeTab } = useLocation();\r\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\r\n  const { t } = useTranslation([namespace, \"translation\"]);\r\n  const GenerateTitle = ({ title, Icon, size = 25 }) => {\r\n    return (\r\n      <Row gutter={10} align={\"middle\"}>\r\n        <Col className=\"lh-0\">\r\n          <SvgConverter width={size} height={size} Icon={Icon} />\r\n        </Col>\r\n        <Col className=\"lh-0\">\r\n          <label className=\"lh-0 text-dark cursor-pointer\">{title}</label>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CollapsiblePanel\r\n      forceRender={true}\r\n      handleTabClick={(keys) => setActiveKey(keys)}\r\n      activeKey={activeKey}\r\n      tabs={[\r\n        {\r\n          tabKey: \"1\",\r\n          content: <NpxUserInformationForm form={routingGuideForm} selectedItems={selectedItems}/>,\r\n          header: (\r\n            <GenerateTitle\r\n              title={t(\"translation:shipmentAdd.titles.transportation\")}\r\n              Icon={TruckIcon}\r\n              size={25}\r\n            />\r\n          ),\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddNxpUserTabs;\r\n","import React, { useEffect, useState } from \"react\";\nimport i18n from 'i18next';\nimport { getNXPClientCodeEffect } from \"../../../../../redux/RoutingGuide/RoutingGuideEffects\";\nimport FormSelectBox from \"../../../../components/Inputs/FormSelectBox\";\n\nconst NXPClientCodeSelector = ({\n  placeholder = \"Client Code\",\n  label = \"Client Code\",\n  rules = [],\n  name,\n  editMode,\n  margin=\"mb-0\"\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getClientCodeList();\n  }, []);\n\n  const getClientCodeList = async () => {\n    try {\n      setLoading(true);\n      const { data } = await getNXPClientCodeEffect();\n      let options = data.map((row) => ({\n        label: row.text,\n        value: row.value,\n      }));\n      setOptions(options);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={[{ label: \"Select\", value: \"\" }, ...options]}\n      placeholder={placeholder}\n      label={label}\n      margin={margin}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n    />\n  );\n};\n\nexport default NXPClientCodeSelector;\n","import React, { useEffect, useState } from \"react\";\nimport i18n from 'i18next';\nimport { getNXPUserTypesEffect } from \"../../../../../redux/RoutingGuide/RoutingGuideEffects\";\nimport FormSelectBox from \"../../../../components/Inputs/FormSelectBox\";\n\nconst NXPUserTypeSelector = ({\n  placeholder = i18n.t('translation:default.fields.userType.placeholder'),\n  label = i18n.t('translation:default.fields.userType.label'),\n  rules = [],\n  name,\n  editMode,\n  margin\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getStatusList();\n  }, []);\n\n  const getStatusList =  async() => {\n    try {\n      setLoading(true);\n      const { data } = await getNXPUserTypesEffect();\n      let options = data.map((row) => ({\n        label: row.text,\n        value: row.value,\n      }));\n      setOptions(options);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n  \n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={[{ label: \"Select\", value: \"\" }, ...options]}\n      placeholder={placeholder}\n      label={label}\n      margin={margin}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n    />\n  );\n};\n\nexport default NXPUserTypeSelector;\n"],"names":["AddNxpUser","pathname","activeTab","useLocation","namespace","useMemo","routeFileSelector","t","useTranslation","activeKey","setActiveKey","useState","navigate","useNavigate","dispatch","useDispatch","createRoutingGuideUser","useSelector","state","routingGuide","routingGuideForm","Form","useForm","UserStatus","useWatch","useEffect","data","createRoutingGuideUserInClear","getNXPUserSearchInClearData","getNXPUserSearchInProgress","handleSubmit","async","formValues","getFieldsValue","payload","UserId","UserTypeDesc","UserTypeLogin","ClientCodeDesc","CountryName","StateName","OldPassword","IsAccepted","UserName","UserNameInput","createRoutingGuideUserInProgress","error","console","log","_jsx","Provider","className","onFormFinish","submittedForm","validateFields","then","response","children","_jsxs","Row","Col","Paper","align","justify","PrimaryLabel","initialValues","form","name","FormLabel","ToggleSwitch","checked","checkedChildren","unCheckedChildren","onClick","setFieldValue","HiddenFormInput","SaveCancelButtons","onSave","onCancel","AddNxpUserTabs","WithFilter","contentElement","_ref","placeholder","label","editMode","forFilter","margin","singleLineMode","concat","Math","random","rules","colon","inverMode","_Fragment","Item","length","isRequiredField","labelCol","Input","Password","readOnly","id","selectedItems","countryCode","_selectedItems$client","_selectedItems$countr","_selectedItems$state","_selectedItems$city","_selectedItems$postal","_selectedItems$passwo","Object","keys","setFieldsValue","userName","UserTypeId","userTypeId","FirstName","firstName","LastName","lastName","Email","email","CompanyName","companyName","ClientCode","clientCode","trim","CountryCode","State","City","city","PostalCode","postal","password","gutter","sm","FormInput","required","message","NXPUserTypeSelector","validator","_","value","Promise","resolve","String","toLowerCase","match","reject","Error","FormInputPassword","maxLength","NXPClientCodeSelector","CountrySelector","onChange","onChangeCountryHandler","undefined","StateSelector","CitySelector","stateCode","PostalCodeInput","handleZipDetails","_data$state","_data$city","_data$countryCode","_data$zip","zip","GenerateTitle","_ref2","title","Icon","size","SvgConverter","width","height","CollapsiblePanel","forceRender","handleTabClick","tabs","tabKey","content","NpxUserInformationForm","header","TruckIcon","options","setOptions","loading","setLoading","getClientCodeList","getNXPClientCodeEffect","map","row","text","FormSelectBox","i18n","getStatusList","getNXPUserTypesEffect"],"sourceRoot":""}