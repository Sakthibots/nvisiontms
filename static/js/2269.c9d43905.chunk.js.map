{"version":3,"file":"static/js/2269.c9d43905.chunk.js","mappings":"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","sources":["views/components/Cards/FiledCard.jsx","views/components/Inputs/TextEditor.jsx","views/screens/NXPRoutingGuide/Home/NPXContentEditor.jsx","views/screens/NXPRoutingGuide/Home/RoutingGuideHomeContent.jsx","views/screens/NXPRoutingGuide/User/Component/RoutingUserExport/RoutingUserExportForm.jsx","contants/RoutingGuideUser.js","views/screens/NXPRoutingGuide/User/Component/Header/NXPRoutingGuideUserOrderByFilter.jsx","views/screens/NXPRoutingGuide/User/RoutingGuideUserHeader.jsx","views/screens/NXPRoutingGuide/User/Component/Search/UserSearch.jsx","views/screens/NXPRoutingGuide/User/Component/Search/RoutingGuideUserFilterContent.jsx","views/screens/NXPRoutingGuide/User/RoutingGuideUserFilter.jsx","views/screens/NXPRoutingGuide/User/Component/DetailCard/RoutingGuideUserDetailCard.jsx","views/screens/NXPRoutingGuide/User/RoutingGuideUserContent.jsx","views/screens/NXPRoutingGuide/RoutingGuide/Component/Header/NXPRoutingGuideOrderByFilter.jsx","views/screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideHeader.jsx","views/screens/NXPRoutingGuide/RoutingGuide/Component/Search/NXPRoutingGuideSearchForm.jsx","views/screens/NXPRoutingGuide/RoutingGuide/Component/Search/NXPRoutingGuideFilterContent.jsx","views/screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideFilter.jsx","views/screens/NXPRoutingGuide/RoutingGuide/Component/DetailCard/NXPRoutingGuideDetailCard.jsx","views/screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideContent.jsx","views/pages/NXPRoutingGuide/NXPRoutingGuidePage.jsx","views/components/Inputs/FormInputPassword.jsx","views/screens/NXPRoutingGuide/User/Component/AddUserInformation/AddUserInformation.jsx","views/screens/NXPRoutingGuide/User/Component/AddUserInformation/AddNxpUserTab.jsx","views/screens/NXPRoutingGuide/User/Component/NXPClientCodeSelector.jsx","views/screens/NXPRoutingGuide/User/Component/NXPUserTypeSelector.jsx"],"sourcesContent":["import { Typography } from \"antd\";\nimport React from \"react\";\n\nconst FiledCard = ({\n  title,\n  children,\n  labelClass = false,\n  textClass,\n  childClassName,\n}) => {\n  return (\n    <div className={`field-card-container ${textClass}`}>\n      <Typography.Text className={`field-card-title ${labelClass}`}>\n        {title}\n      </Typography.Text>\n      <div className={`content ${childClassName}`}>{children}</div>\n    </div>\n  );\n};\n\nexport default FiledCard;\n","import React from \"react\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport { Spin } from \"antd\";\nimport { useState } from \"react\";\n\nconst TextEditor = ({ value = \"\", onChange = () => {} }) => {\n  const [editorReady, setEditorReady] = useState(false);\n  return (\n    <div className=\"text-editor-container\">\n      <Spin spinning={!editorReady}>\n        <CKEditor\n          editor={ClassicEditor}\n          data={String(value)}\n          onReady={(editor) => {\n            setEditorReady(true);\n          }}\n          onChange={(event, editor) => onChange(editor.getData())}\n          config={{\n            fontFamily: {\n              options: [\n                \"default\",\n                \"Ubuntu, Arial, sans-serif\",\n                \"Ubuntu Mono, Courier New, Courier, monospace\",\n              ],\n            },\n            toolbar: {\n              fontFamily: {\n                options: [\n                  \"default\",\n                  \"Ubuntu, Arial, sans-serif\",\n                  \"Ubuntu Mono, Courier New, Courier, monospace\",\n                ],\n              },\n              items: [\n                \"heading\",\n                \"|\",\n                \"fontFamily\",\n                \"bold\",\n                \"italic\",\n                \"link\",\n                \"bulletedList\",\n                \"numberedList\",\n                \"|\",\n                \"outdent\",\n                \"indent\",\n                \"|\",\n                \"imageUpload\",\n                \"blockQuote\",\n                \"insertTable\",\n                \"mediaEmbed\",\n\n                \"alignment\",\n                \"code\",\n                \"codeBlock\",\n                \"findAndReplace\",\n                \"fontColor\",\n                \"fontFamily\",\n                \"fontSize\",\n                \"fontBackgroundColor\",\n                \"highlight\",\n                \"horizontalLine\",\n                \"htmlEmbed\",\n                \"imageInsert\",\n                \"|\",\n                \"undo\",\n                \"redo\",\n              ],\n            },\n\n            language: \"en\",\n            image: {\n              toolbar: [\n                \"imageTextAlternative\",\n                \"toggleImageCaption\",\n                \"imageStyle:inline\",\n                \"imageStyle:block\",\n                \"imageStyle:side\",\n              ],\n            },\n            table: {\n              contentToolbar: [\"tableColumn\", \"tableRow\", \"mergeTableCells\"],\n            },\n          }}\n        />\n      </Spin>\n    </div>\n  );\n};\n\nexport default TextEditor;\n","import { Col, Row } from \"antd\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport Button from \"../../../components/Buttons/Button\";\nimport SaveCancelButtons from \"../../../components/Buttons/SaveCancelButtons\";\nimport parse from \"html-react-parser\";\nimport TextEditor from \"../../../components/Inputs/TextEditor\";\n\nfunction NPXContentEditor({ data, updateContentHandler = () => {} }) {\n  const [value, setValue] = useState(\"\");\n  const [editDocument, setEditDocument] = useState(false);\n\n  useEffect(() => {\n    if (data?.content) {\n      setValue(data?.content);\n    }\n  }, [data?.content]);\n\n  return (\n    <Fragment>\n      <Row>\n        <Col sm={24} className=\"d-flex justify-content-end\">\n          {!editDocument && (\n            <Button\n              className=\"primary\"\n              onClick={() => setEditDocument(true)}\n              htmlType=\"button\"\n              disabled={false}\n            >\n              Edit Document\n            </Button>\n          )}\n          {editDocument && (\n            <SaveCancelButtons\n              onSave={() => {\n                setEditDocument(false);\n                updateContentHandler({\n                  contentId: data?.contentId,\n                  content: value,\n                });\n              }}\n              onCancel={() => {\n                setValue(data?.content);\n                setEditDocument(false);\n              }}\n            />\n          )}\n        </Col>\n      </Row>\n      <Row className=\"mt-15 mb-15\">\n        <Col sm={24}>\n          {editDocument && <TextEditor value={value} onChange={setValue} />}\n          {!editDocument && <div dangerouslySetInnerHTML={{ __html: value }} />}\n        </Col>\n      </Row>\n    </Fragment>\n  );\n}\nexport default NPXContentEditor;\n","import React, { Fragment, useEffect, useMemo, useState } from \"react\";\nimport CollapsiblePanel from \"../../../components/Tabs/CollapsiblePanel\";\nimport { useTranslation } from \"react-i18next\";\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getContentNXPRoutingGuideInProgress,\n  updateContentNXPRoutingGuideInProgress,\n} from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\nimport NPXContentEditor from \"./NPXContentEditor\";\n\nfunction RoutingGuideHomeContent() {\n  const [activeKey, setActiveKey] = useState([\"1\", \"2\", \"3\", \"4\"]);\n  const namespace = useMemo(() => routeFileSelector(activeKey), [activeKey]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const dispatch = useDispatch();\n  const { nxpHomeContent, nxpUpdateHomeContent } = useSelector(\n    (state) => state.routingGuide\n  );\n\n  const [componentList, setComponentList] = useState([]);\n\n  useEffect(() => {\n    if (nxpHomeContent?.data?.dashBoardContent?.length > 0) {\n      let temp = [];\n      nxpHomeContent?.data?.dashBoardContent?.map((item, index) => {\n        temp.push({\n          content: (\n            <NPXContentEditor\n              data={{ ...item }}\n              updateContentHandler={(data) => updateContentHandler(data)}\n            />\n          ),\n          header: item.contentHeader,\n        });\n      });\n      setComponentList(temp);\n    }\n  }, [nxpHomeContent]);\n\n  useEffect(() => {\n    if (nxpUpdateHomeContent?.data?.status === \"save\") {\n      dispatch(getContentNXPRoutingGuideInProgress());\n    }\n  }, [nxpUpdateHomeContent]);\n\n  useEffect(() => {\n    dispatch(getContentNXPRoutingGuideInProgress());\n  }, []);\n\n  const updateContentHandler = (data) => {\n    dispatch(updateContentNXPRoutingGuideInProgress(data));\n  };\n\n  const handleTabClick = (keys) => {\n    if (keys && keys[1]) {\n      setActiveKey(keys[1]);\n    } else {\n      setActiveKey(\"\");\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"h-100 overflow-y-inherit d-flex flex-direction-column\">\n        <div className=\"d-flex flex-direction-column overflow-hidden h-100 br-4\">\n          <div className=\"custom-scroll-bar overflow-x-hidden flex-1\">\n            {nxpHomeContent?.data?.dashBoardContent?.length > 0 && (\n              <CollapsiblePanel\n                forceRender={true}\n                handleTabClick={handleTabClick}\n                activeKey={activeKey}\n                showArrow={false}\n                tabs={componentList}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default RoutingGuideHomeContent;\n","import { Col, Form, Row, Spin, notification } from \"antd\";\nimport _, { cloneDeep, omitBy } from \"lodash\";\nimport React, { Fragment, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { ROUTING_GUIDE_USER_EXPORT_FILEDS } from \"../../../../../../contants/RoutingGuideUser\";\nimport FilterCard from \"../../../../../components/Cards/FilterCard\";\nimport FormCheckBox from \"../../../../../components/Inputs/FormCheckBox\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport { exportShipmentListToExcel } from \"../../../../../../utilz/exportToExcel\";\n\nconst RoutingUserExportForm = ({ form, findSelectedItem }) => {\n  const [visibilityInfoAll, setVisibilityInfoAll] = useState(true);\n  const routingGuideUserFields = [...ROUTING_GUIDE_USER_EXPORT_FILEDS()];\n  const dispatch = useDispatch();\n  const [selectedObjVal, setSelectedObjVal] = useState({});\n  const { nxpUserSearchList } = useSelector((state) => state.routingGuide);\n  const [api, contextHolder] = notification.useNotification();\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  useEffect(() => {\n    if (form) {\n      handleSelectAll(routingGuideUserFields, true);\n    }\n  }, [form]);\n\n  const handleSelectAll = (data, value) => {\n    data.forEach(({ name }) => {\n      form.setFieldValue(name, value);\n    });\n  };\n  const handleSubmit = (data) => {\n    let selectedFields = omitBy(data, (val) => !val);\n    let selectedObj = routingGuideUserFields.filter(\n      (item) => selectedFields[item.name] === true\n    );\n    setSelectedObjVal(cloneDeep(selectedObj));\n    generateExportValuesWithFields(cloneDeep(selectedObj), findSelectedItem);\n  };\n\n  const generateExportValuesWithFields = (columns, data) => {\n    let rows = [];\n    data.forEach((row) => {\n      let arr = [];\n      columns.forEach(({ name }) => {\n        if (Object.hasOwnProperty.call(row, name)) {\n          arr.push(row[name]);\n        } else {\n          arr.push(\"\");\n        }\n      });\n      rows.push(arr);\n    });\n    columns = columns.map(({ label }) => ({\n      name: label.length > 0 ? label : \"---\",\n    }));\n    exportShipmentListToExcel(columns, rows, \"NXP User\", \"User Result\");\n  };\n\n  return (\n    <Fragment>\n      <Form\n        onFinish={handleSubmit}\n        className=\"h-100 custom-scroll-bar\"\n        form={form}\n      >\n        <FilterCard\n          showBorder={true}\n          title={\n            <FormCheckBox\n              checkBoxClass={\"normal-checkbox\"}\n              label={\"Routing Guide User Information\"}\n              className={\"m-0\"}\n              checked={visibilityInfoAll}\n              onChange={(e) => {\n                setVisibilityInfoAll(e.target.checked);\n                handleSelectAll(routingGuideUserFields, e.target.checked);\n              }}\n            />\n          }\n          className={\"mb-20\"}\n        >\n          <Row className={\"px-16 pt-15\"}>\n            {routingGuideUserFields.map((item, index) => (\n              <Fragment key={index}>\n                <Col lg={6}>\n                  <Col lg={24}>\n                    <FormCheckBox\n                      checkBoxClass={\"normal-checkbox\"}\n                      label={item.label}\n                      name={item.name}\n                      className={\"mb-15\"}\n                    />\n                  </Col>\n                </Col>\n              </Fragment>\n            ))}\n          </Row>\n        </FilterCard>\n      </Form>\n    </Fragment>\n  );\n};\n\nexport default RoutingUserExportForm;\n","export const ROUTING_GUIDE_USER_EXPORT_FILEDS = () => [\n  {\n    label: \"User Id\",\n    name: \"userId\",\n  },\n  {\n    label: \"User Name\",\n    name: \"userName\",\n  },\n  {\n    label: \"User Type\",\n    name: \"userTypeDesc\",\n  },\n  {\n    label: \"First Name\",\n    name: \"firstName\",\n  },\n  {\n    label: \"Last Name\",\n    name: \"lastName\",\n  },\n  {\n    label: \"Company\",\n    name: \"companyName\",\n  },\n  {\n    label: \"Client Code Desc\",\n    name: \"companyName\",\n  },\n  {\n    label: \"Country\",\n    name: \"countryName\",\n  },\n  {\n    label: \"State/Province \",\n    name: \"stateName\",\n  },\n  {\n    label: \"City\",\n    name: \"city\",\n  },\n  {\n    label: \"User Status\",\n    name: \"userStatus\",\n  },\n  {\n    label: \"Email\",\n    name: \"email\",\n  }\n];\n","import { Col, Form, Row } from \"antd\";\nimport {\n  NXP_SORTING_FIELDS_ROUTING_GUIDE_USER_ORDER,\n  SORTING_ORDERS,\n} from \"./../../../../../../contants/common\";\nimport IconButton from \"./../../../../../components/Buttons/IconButton\";\nimport FormSelectBox from \"./../../../../../components/Inputs/FormSelectBox\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect, useMemo } from \"react\";\nimport HiddenFormInput from \"./../../../../../components/Inputs/HiddenFormInput\";\nimport SvgConverter from \"./../../../../../components/Common/SvgConverter\";\nimport { ReactComponent as FilterAscIcon } from \"./../../../../../../assets/icons/filter-asc.svg\";\nimport { ReactComponent as FilterDescIcon } from \"./../../../../../../assets/icons/filter-desc.svg\";\nimport { useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"./../../../../../../utilz/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  getNXPUserSearchInClearData,\n  getNXPUserSearchInProgress,\n  \n} from \"./../../../../../../redux/RoutingGuide/RoutingGuideAction\";\n\nconst NXPRoutingGuideUserOrderByFilter = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n\n  const handleSortingToggle = (oldType) => {\n    if (oldType === SORTING_ORDERS.ASC) {\n      return SORTING_ORDERS.DESC;\n    } else if (oldType === SORTING_ORDERS.DESC) {\n      return SORTING_ORDERS.ASC;\n    }\n  };\n\n  const OrderASC = Form.useWatch(\"OrderASC\", form);\n  const OrderBy = Form.useWatch(\"OrderBy\", form);\n\n  useEffect(() => {\n    if (OrderASC && OrderBy) {\n      dispatch(getNXPUserSearchInClearData());\n      dispatch(\n        getNXPUserSearchInProgress({\n          OrderByColumn: OrderBy,\n          OrderBySort: OrderASC,\n          PageNo: 1,\n        })\n      );\n    }\n  }, [OrderASC, OrderBy]);\n\n  return (\n    <Form\n      className=\"w-100\"\n      form={form}\n      initialValues={{ OrderASC: SORTING_ORDERS.ASC }}\n    >\n      <Row align=\"middle\" gutter={15}>\n        <Col sm={16} lg={16}>\n          <FormSelectBox\n            options={NXP_SORTING_FIELDS_ROUTING_GUIDE_USER_ORDER}\n            className=\"w-100\"\n            margin=\"m-0\"\n            placeholder={t(\"translation:default.fields.sortBy.label\")}\n            name={\"OrderBy\"}\n            label={\"\"}\n          />\n        </Col>\n        <Col>\n          {OrderASC && (\n            <IconButton\n              onClick={() =>\n                form.setFieldValue(\"OrderASC\", handleSortingToggle(OrderASC))\n              }\n            >\n              <SvgConverter\n                className=\"mr-5\"\n                Icon={\n                  OrderASC === SORTING_ORDERS.ASC\n                    ? FilterAscIcon\n                    : FilterDescIcon\n                }\n                height={18}\n                width={18}\n              />\n            </IconButton>\n          )}\n        </Col>\n      </Row>\n      <HiddenFormInput name=\"OrderASC\" />\n    </Form>\n  );\n};\n\nexport default NXPRoutingGuideUserOrderByFilter;\n","import React, { Fragment, useMemo, useState } from \"react\";\nimport FormCheckBox from \"../../../components/Inputs/FormCheckBox\";\nimport { Col, Form, Popconfirm, Row } from \"antd\";\nimport TextButton from \"../../../components/Buttons/TextButton\";\nimport { ReactComponent as ExportIcon } from \"./../../../../assets/icons/export-icon.svg\";\nimport { ReactComponent as DeleteIcon } from \"./../../../../assets/icons/delete-icon.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormLabel from \"../../../components/Labels/FormLabel\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\nimport SvgConverter from \"../../../components/Common/SvgConverter\";\nimport { APP_ROUTES } from \"../../../../contants/RoutesEnum\";\nimport Button from \"../../../components/Buttons/Button\";\nimport {\n  deleteRoutingUserInProgress,\n  setNXPUserSelectedRecord,\n} from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\nimport CommonModal from \"../../../components/Modals/CommonModal\";\nimport RoutingUserExportForm from \"./Component/RoutingUserExport/RoutingUserExportForm\";\nimport NXPRoutingGuideUserOrderByFilter from \"./Component/Header/NXPRoutingGuideUserOrderByFilter\";\nimport { setAppLoader } from \"../../../../redux/common/CommonActions\";\n\nfunction RoutingGuideUserHeader() {\n  const [exportModal, setExportModal] = useState(false);\n  const [SelectedObjVal, setSelectedObjVal] = useState(false);\n  const [exportForm] = Form.useForm();\n  const { nxpUserSearchList } = useSelector((state) => state.routingGuide);\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const findSelectedItem = nxpUserSearchList.data.filter(\n    (item) => item?.isChecked === true\n  );\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    let records = findSelectedItem.map((item) => {\n      return { userId: item.userId };\n    });\n    dispatch(deleteRoutingUserInProgress(records));\n  };\n\n  const exportRoutingGuideData = () => {\n    setExportModal(true);\n  };\n\n  const selectAllHandler = (val) => {\n    dispatch(setNXPUserSelectedRecord(val.target.checked));\n  };\n\n  return (\n    <Fragment>\n      <Row justify=\"space-between\" className={`py-15 px-14 align=\"middle`}>\n        <Col className=\"flex-1\">\n          <Row align={\"middle\"} gutter={20}>\n            <Col sm={12}>\n              <div className=\"d-flex gap-1\">\n                <FormCheckBox\n                  className={`m-0`}\n                  checkBoxClass=\"normal-checkbox\"\n                  onChange={selectAllHandler}\n                  checked={\n                    nxpUserSearchList.data.length > 0 &&\n                    nxpUserSearchList.data.length === findSelectedItem.length\n                  }\n                  label={\n                    <FormLabel className=\"white-space-nowrap\">\n                      {t(\"translation:default.fields.selectAll\")}\n                    </FormLabel>\n                  }\n                />\n                <NXPRoutingGuideUserOrderByFilter />\n              </div>\n            </Col>\n\n            <Col sm={12}>\n              <div className=\"d-flex justify-content-end gap-1 align-items-center\">\n                <Link to={APP_ROUTES.ADD_NXP_USER}>\n                  <Button>{t(\"Add User\")}</Button>\n                </Link>\n\n                <Popconfirm\n                  placement=\"topRight\"\n                  title={t(\"translation:default.fields.deleteConfirm.title\")}\n                  onConfirm={handleDelete}\n                  okText={t(\"translation:default.options.yes\")}\n                  cancelText={t(\"translation:default.buttons.cancel\")}\n                  overlayClassName=\"\"\n                >\n                  <TextButton\n                    icon={<SvgConverter Icon={DeleteIcon} />}\n                    disabled={findSelectedItem.length === 0 ? true : false}\n                  >\n                    <label className=\"ml-5\">\n                      {t(\"translation:default.buttons.delete\")}\n                    </label>\n                  </TextButton>\n                </Popconfirm>\n\n                <TextButton\n                  icon={<ExportIcon />}\n                  onClick={exportRoutingGuideData}\n                  disabled={findSelectedItem.length === 0 ? true : false}\n                >\n                  <label className=\"ml-5\">\n                    {t(\"translation:default.buttons.export\")}\n                  </label>\n                </TextButton>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      <CommonModal\n        className=\"vw-85 h-84\"\n        open={exportModal}\n        title={\"Routing Guide User Export\"}\n        okText={t(\"translation:default.buttons.export\")}\n        cancelText={t(\"translation:default.buttons.close\")}\n        onCancel={() => setExportModal(false)}\n        onClose={() => setExportModal(false)}\n        onOk={() => exportForm.submit()}\n      >\n        <RoutingUserExportForm\n          form={exportForm}\n          findSelectedItem={findSelectedItem}\n        />\n      </CommonModal>\n    </Fragment>\n  );\n}\n\nexport default RoutingGuideUserHeader;\n","import { Col, Form, Row } from \"antd\";\nimport React, { useMemo } from \"react\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport FormInput from \"../../../../../components/Inputs/FormInput\";\nimport { STATUS_OPTIONS } from \"../../../../../../contants/common\";\nimport FormSelectBox from \"../../../../../components/Inputs/FormSelectBox\";\nimport NPXUserTypesSelector from \"../NXPUserTypeSelector\";\nimport NXPClientCodeSelector from \"../NXPClientCodeSelector\";\n\nfunction UserSearch({ form }) {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n\n  return (\n    <Row className=\"pt-10\">\n      <Col sm={24}>\n        <FormInput\n          placeholder={\"User Name\"}\n          label={\"User Name\"}\n          editMode={true}\n          name={\"UserName\"}\n        />\n      </Col>\n      <Col sm={24}>\n        <FormInput\n          placeholder={\"Company\"}\n          label={\"Company\"}\n          editMode={true}\n          name={\"CompanyName\"}\n        />\n      </Col>\n      <Col sm={24}>\n        <FormSelectBox\n          name=\"UserStatus\"\n          label={\"Status\"}\n          placeholder={\"Status\"}\n          margin={\"mb-15\"}\n          className=\"w-100\"\n          options={STATUS_OPTIONS}\n        />\n      </Col>\n      <Col sm={24}>\n        <NPXUserTypesSelector\n          margin={\"mb-15\"}\n          editMode={true}\n          label={t(\"translation:default.fields.userType.label\")}\n          name={\"UserType\"}\n        />\n      </Col>\n      <Col sm={24}>\n        <NXPClientCodeSelector\n          margin={\"mb-15\"}\n          editMode={true}\n          label={\"Client Code\"}\n          name={\"ClientCode\"}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default UserSearch;\n","import { Collapse } from \"antd\";\nimport { useMemo, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport UserSearch from \"./UserSearch\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\n\nconst { Panel } = Collapse;\nfunction RoutingGuideUserFilterContent({ form }) {\n    const [activeKey, setActiveKey] = useState(\"1\");\n    const { pathname: activeTab } = useLocation();\n    const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n    const { t } = useTranslation([namespace, 'translation']);\n  \n    const handleTabClick = (keys) => {\n      if (keys && keys[1]) {\n        setActiveKey(keys[1]);\n      } else {\n        setActiveKey(\"\");\n      }\n    };\n\n    return (\n        <Collapse\n          ghost\n          className=\"filter-collapse-container px-16\"\n          activeKey={activeKey}\n          onChange={handleTabClick}\n        >\n          <Panel header={'User Search'} key=\"1\">\n            <UserSearch form={form} />\n          </Panel>\n         \n        </Collapse>\n      );\n}\nexport default RoutingGuideUserFilterContent;","import { Col, Form, Row } from \"antd\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"../../../components/Buttons/Button\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport RoutingGuideUserFilterContent from \"./Component/Search/RoutingGuideUserFilterContent\";\r\nimport { getNXPUserSearchInClearData, getNXPUserSearchInProgress } from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\r\n\r\nfunction RoutingGuideUserFilter() {\r\n  const [form] = Form.useForm();\r\n  const { pathname: activeTab } = useLocation();\r\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\r\n  const { t } = useTranslation([namespace, \"translation\"]);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearchFormHandler = (data) => {\r\n    dispatch(getNXPUserSearchInClearData());\r\n    dispatch(getNXPUserSearchInProgress({\r\n      ...data,\r\n      PageNo:1\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-direction-column overflow-hidden h-100 br-4\">\r\n      <div className=\"custom-scroll-bar overflow-x-hidden mb-15 flex-1\">\r\n        <Form\r\n          onFinish={onSearchFormHandler}\r\n          form={form}\r\n          initialValues={{\r\n            CompanyName: \"\",\r\n            UserStatus: \"\",\r\n            ClientCode: \"\",\r\n            UserName: \"\",\r\n            UserType: \"\",\r\n          }}\r\n        >\r\n          <RoutingGuideUserFilterContent form={form} />\r\n        </Form>\r\n      </div>\r\n      <Row className=\"px-15\" gutter={15}>\r\n        <Col sm={24} md={12}>\r\n          <Button\r\n            fullWidth={true}\r\n            type={\"default\"}\r\n            onClick={() => form.resetFields()}\r\n            buttonType=\"button\"\r\n          >\r\n            {t(\"translation:default.buttons.clear\")}\r\n          </Button>\r\n        </Col>\r\n        <Col sm={24} md={12}>\r\n          <Button\r\n            fullWidth={true}\r\n            type={\"primary\"}\r\n            onClick={() => form.submit()}\r\n            buttonType=\"submit\"\r\n          >\r\n            {t(\"translation:default.buttons.search\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\nexport default RoutingGuideUserFilter;\r\n","import React, { Fragment, useMemo, useState } from \"react\";\nimport Paper from \"../../../../../components/Paper/Paper\";\nimport { Checkbox, Col, Dropdown, Form, Menu, Row } from \"antd\";\nimport FiledCard from \"../../../../Shipment/components/FiledCard\";\nimport PrimaryLabel from \"../../../../../components/Labels/PrimaryLabel\";\nimport Button from \"../../../../../components/Buttons/Button\";\nimport IconButton from \"../../../../../components/Buttons/IconButton\";\nimport { ReactComponent as MoreIcon } from \".././../../../../../assets/icons/dots-v.svg\";\nimport { useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { setNXPUserSelectedRecord } from \"../../../../../../redux/RoutingGuide/RoutingGuideAction\";\n\nfunction RoutingGuideUserDetailCard({ data, onClickContent = () => {} }) {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const dispatch = useDispatch();\n\n  const menu = () => (\n    <Menu\n      items={[\n        {\n          key: \"1\",\n          label: (\n            <a onClick={(e) => {\n              e.stopPropagation();\n            }}>{t(\"translation:default.buttons.export\")}</a>\n          ),\n        },\n      ]}\n    />\n  );\n\n  const exportDesignHandler = () => {\n    return (\n      <div className=\"more-button-container\">\n        <Dropdown overlay={menu()} placement=\"bottomRight\">\n          <Button\n            ghost\n            className=\"bg-none border-none w-0 p-0 \"\n            size=\"small\"\n            shape=\"circle\"\n            type={\"ghost\"}\n          >\n            <IconButton className=\"py-4 px-10\">\n              <MoreIcon />\n            </IconButton>\n          </Button>\n        </Dropdown>\n      </div>\n    );\n  };\n\n  return (\n    <Paper className={`shipment-card border-muted`}>\n      <div onClick={(e) => {\n         e.stopPropagation();\n         onClickContent(data);\n      }}>\n        <Row className=\"px-15 py-14\" gutter={15}>\n          <Col>\n            <div className=\"text-center d-flex gap-half\">\n              <Checkbox\n                onClick={(e) => {\n                  e.stopPropagation();\n                  dispatch(setNXPUserSelectedRecord(data.userId))\n                }}\n                checked={data?.isChecked || false}\n                className=\"normal-checkbox\"\n              />\n              <div>\n                <span>User Name : {data.userName}</span>\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={\"User Type\"}>\n              <PrimaryLabel normal={true}>{data.userTypeDesc}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"First Name\"}>\n              <PrimaryLabel normal={true}>{data.firstName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"Last Name\"}>\n              <PrimaryLabel normal={true}>{data.lastName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"Company\"}>\n              <PrimaryLabel normal={true}>{data.companyName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n        </Row>\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={\"Client Code Desc\"}>\n              <PrimaryLabel normal={true}>{data.clientCodeDesc}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"Country\"}>\n              <PrimaryLabel normal={true}>{data.countryName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"State/Province\"}>\n              <PrimaryLabel normal={true}>{data.stateName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"City\"}>\n              <PrimaryLabel normal={true}>{data.city}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n        </Row>\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={\"User Status\"}>\n              <PrimaryLabel normal={true}>{data.userStatus}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={\"Email\"}>\n              <PrimaryLabel normal={true}>{data.email}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n        </Row>\n        {exportDesignHandler()}\n      </div>\n    </Paper>\n  );\n}\nexport default RoutingGuideUserDetailCard;\n","import { Col, Form, Row, Spin } from \"antd\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport ScrollPagination from \"../../../components/Paginations/ScrollPagination\";\nimport {\n  createRoutingGuideUserInClear,\n  createRoutingGuideUserInProgress,\n  deleteRoutingUserInSuccess,\n  getNXPUserSearchInClearData,\n  getNXPUserSearchInProgress,\n  getNXPUserSearchResetRequest,\n} from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EmptyRecords from \"../../../components/Common/EmptyRecords\";\nimport RoutingGuideUserDetailCard from \"./Component/DetailCard/RoutingGuideUserDetailCard\";\nimport Drawer from \"../../../components/Modals/Drawer\";\nimport AddNxpUserTabs from \"./Component/AddUserInformation/AddNxpUserTab\";\nimport SaveCancelButtons from \"../../../components/Buttons/SaveCancelButtons\";\nimport Paper from \"../../../components/Paper/Paper\";\nimport ToggleSwitch from \"../../../components/Switch/ToggleSwitch\";\nimport { useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport HiddenFormInput from \"../../../components/Inputs/HiddenFormInput\";\nimport PrimaryLabel from \"../../../components/Labels/PrimaryLabel\";\nimport FormLabel from \"../../../components/Labels/FormLabel\";\n\nfunction RoutingGuideUserContent() {\n  const { nxpUserSearchList, createRoutingGuideUser, deleteNxpUser } =\n    useSelector((state) => state.routingGuide);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedUserItem, setSelectedUserItem] = useState(\"\");\n  const [routingGuideForm] = Form.useForm();\n  const [activeKey, setActiveKey] = useState([\"1\"]);\n  const UserStatus = Form.useWatch(\"UserStatus\", routingGuideForm);\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getNXPUserSearchResetRequest());\n    dispatch(getNXPUserSearchInClearData());\n    dispatch(getNXPUserSearchInProgress());\n  }, []);\n\n  useEffect(() => {\n    if (createRoutingGuideUser?.data === \"Success\") {\n      setShowModal(false);\n      dispatch(createRoutingGuideUserInClear());\n      dispatch(getNXPUserSearchInClearData());\n      dispatch(getNXPUserSearchInProgress());\n    }\n  }, [createRoutingGuideUser]);\n\n  useEffect(() => {\n    if (deleteNxpUser?.data?.status === \"delete\") {\n      dispatch(getNXPUserSearchInClearData());\n      dispatch(\n        getNXPUserSearchInProgress({\n          PageNo: nxpUserSearchList.request.PageNo + 1,\n        })\n      );\n      dispatch(\n        deleteRoutingUserInSuccess({\n          data: null,\n        })\n      );\n    }\n  }, [deleteNxpUser]);\n\n  const handleLoadMore = () => {\n    dispatch(\n      getNXPUserSearchInProgress({\n        PageNo: nxpUserSearchList.request.PageNo + 1,\n      })\n    );\n  };\n\n  const onCloseDrawer = () => {\n    setShowModal(false);\n  };\n\n  const onSelectedItemHandler = (item) => {\n    setShowModal(true);\n    setSelectedUserItem(item);\n  };\n\n  const handlerUserUpdateItem = async (submittedForm) => {\n    if (submittedForm === \"saveButtonForm\") {\n      try {\n        const formValues = routingGuideForm.getFieldsValue();\n        const payload = {\n          userName: formValues.UserNameInput,\n          userId: selectedUserItem?.userId || \"\",\n          ...formValues,\n          userStatus: formValues?.UserStatus === true ? \"A\" : \"I\",\n        };\n        delete payload.UserStatus;\n        dispatch(createRoutingGuideUserInProgress(payload));\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n    }\n  };\n\n  return (\n    <Row gutter={15} className={\"h-100 overflow-y-inherit mt-15\"}>\n      <Col\n        sm={24}\n        className={\n          \"h-100 pb-15 overflow-y-inherit d-flex flex-direction-column\"\n        }\n      >\n        <div className=\"h-100 overflow-y-inherit d-flex flex-direction-column\">\n          <div className=\"d-flex flex-direction-column overflow-hidden h-100 br-4\">\n            {nxpUserSearchList.progressing === false &&\n              nxpUserSearchList?.data.length === 0 && <EmptyRecords />}\n            <ScrollPagination\n              className={`${\n                nxpUserSearchList?.data?.length > 0 ? \"mb-15\" : \"pb-15\"\n              } h-100`}\n              loadMore={handleLoadMore}\n              hasMore={\n                nxpUserSearchList?.progressing\n                  ? false\n                  : nxpUserSearchList?.data?.length <\n                    nxpUserSearchList?.totalCount\n              }\n              isLoading={\n                nxpUserSearchList.progressing === true &&\n                nxpUserSearchList.data.length > 0\n              }\n              scrollOffset={100}\n            >\n              {nxpUserSearchList.progressing === true &&\n                nxpUserSearchList?.data.length === 0 && (\n                  <Spin className=\"d-flex align-items-center h-100 justify-content-center\" />\n                )}\n              {nxpUserSearchList?.data?.length > 0 &&\n                nxpUserSearchList?.data.map((data, index) => (\n                  <RoutingGuideUserDetailCard\n                    key={index}\n                    data={data}\n                    onClickContent={onSelectedItemHandler}\n                  />\n                ))}\n            </ScrollPagination>\n\n            <Drawer\n              visible={showModal}\n              onClose={onCloseDrawer}\n              headerContents={\n                <h2 className=\"header-text m-0\">\n                  User Name : {selectedUserItem.userName}\n                </h2>\n              }\n              width={\"75%\"}\n              contentClassName=\"routing-guide-user-update-model\"\n            >\n              <div className=\"p-15\">\n                <Form.Provider\n                  className={\"overflow-hidden h-100\"}\n                  onFormFinish={handlerUserUpdateItem}\n                >\n                  <Row\n                    className={\n                      \"flex-direction-column flex-nowrap overflow-hidden h-100\"\n                    }\n                  >\n                    <Col className=\"mb-15\">\n                      <Paper className={\"p-15 border-radius-bottom-none\"}>\n                        <Row align=\"middle\" justify=\"space-between\">\n                          <Col>\n                            <PrimaryLabel className=\"dark-header-text\">\n                              Update NPX User\n                            </PrimaryLabel>\n                          </Col>\n                          <Col className=\"d-flex gap-1 align-items-center\">\n                            <Form\n                              initialValues={{\n                                UserStatus:\n                                  selectedUserItem?.userStatus === \"A\"\n                                    ? true\n                                    : false,\n                              }}\n                              form={routingGuideForm}\n                              name={\"routingGuideForm\"}\n                            >\n                              <div className=\"d-flex gap-half\">\n                                <FormLabel>User Status</FormLabel>\n                                <ToggleSwitch\n                                  checked={UserStatus}\n                                  checkedChildren={\"Active\"}\n                                  unCheckedChildren={\"InActive\"}\n                                  onClick={() =>\n                                    routingGuideForm.setFieldValue(\n                                      \"UserStatus\",\n                                      !UserStatus\n                                    )\n                                  }\n                                />\n                              </div>\n                              <HiddenFormInput name={\"UserStatus\"} />\n                            </Form>\n                            <Form name=\"saveButtonForm\">\n                              <SaveCancelButtons\n                                onSave={() => {}}\n                                onCancel={() => setShowModal(false)}\n                              />\n                            </Form>\n                          </Col>\n                        </Row>\n                      </Paper>\n                    </Col>\n                    <Col className=\"flex-1 custom-scroll-bar\">\n                      <AddNxpUserTabs\n                        routingGuideForm={routingGuideForm}\n                        activeKey={activeKey}\n                        setActiveKey={setActiveKey}\n                        selectedItems={selectedUserItem}\n                      />\n                    </Col>\n                  </Row>\n                </Form.Provider>\n              </div>\n            </Drawer>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default RoutingGuideUserContent;\n","import { Col, Form, Row } from \"antd\";\nimport {\n  NXP_SORTING_FIELDS_ROUTING_GUIDE_ORDER,\n  SORTING_FIELDS_ROUTING_GUIDE_ORDER,\n  SORTING_ORDERS,\n} from \"./../../../../../../contants/common\";\nimport IconButton from \"./../../../../../components/Buttons/IconButton\";\nimport FormSelectBox from \"./../../../../../components/Inputs/FormSelectBox\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect, useMemo } from \"react\";\nimport HiddenFormInput from \"./../../../../../components/Inputs/HiddenFormInput\";\nimport SvgConverter from \"./../../../../../components/Common/SvgConverter\";\nimport { ReactComponent as FilterAscIcon } from \"./../../../../../../assets/icons/filter-asc.svg\";\nimport { ReactComponent as FilterDescIcon } from \"./../../../../../../assets/icons/filter-desc.svg\";\nimport { useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"./../../../../../../utilz/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  getRoutingGuidelist,\n  getRoutingGuidelistReset,\n} from \"./../../../../../../redux/RoutingGuide/RoutingGuideAction\";\n\nconst NXPRoutingGuideOrderByFilter = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n\n  const handleSortingToggle = (oldType) => {\n    if (oldType === SORTING_ORDERS.ASC) {\n      return SORTING_ORDERS.DESC;\n    } else if (oldType === SORTING_ORDERS.DESC) {\n      return SORTING_ORDERS.ASC;\n    }\n  };\n\n\n  const OrderASC = Form.useWatch(\"OrderASC\", form);\n  const OrderBy = Form.useWatch(\"OrderBy\", form);\n\n  useEffect(() => {\n    if (OrderASC && OrderBy) {\n      dispatch(getRoutingGuidelistReset());\n      dispatch(\n        getRoutingGuidelist({\n          OrderByColumn: OrderBy,\n          OrderBySort: OrderASC,\n          PageSize: 10,\n          PageNo: 1,\n        })\n      );\n    }\n  }, [OrderASC, OrderBy]);\n\n  return (\n    <Form\n      className=\"w-100\"\n      form={form}\n      initialValues={{ OrderASC: SORTING_ORDERS.ASC }}\n    >\n      <Row align=\"middle\" gutter={15}>\n        <Col sm={16} lg={16}>\n          <FormSelectBox\n            options={NXP_SORTING_FIELDS_ROUTING_GUIDE_ORDER}\n            className=\"w-100\"\n            margin=\"m-0\"\n            placeholder={t(\"translation:default.fields.sortBy.label\")}\n            name={\"OrderBy\"}\n            label={\"\"}\n          />\n        </Col>\n        <Col>\n          {OrderASC && (\n            <IconButton\n              onClick={() =>\n                form.setFieldValue(\"OrderASC\", handleSortingToggle(OrderASC))\n              }\n            >\n              <SvgConverter\n                className=\"mr-5\"\n                Icon={\n                  OrderASC === SORTING_ORDERS.ASC\n                    ? FilterAscIcon\n                    : FilterDescIcon\n                }\n                height={18}\n                width={18}\n              />\n            </IconButton>\n          )}\n        </Col>\n      </Row>\n      <HiddenFormInput name=\"OrderASC\" />\n    </Form>\n  );\n};\n\nexport default NXPRoutingGuideOrderByFilter;\n","import React, { Fragment, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { Col, Form, Popconfirm, Row } from \"antd\";\nimport Button from \"../../../components/Buttons/Button\";\nimport FormCheckBox from \"../../../components/Inputs/FormCheckBox\";\nimport FormLabel from \"../../../components/Labels/FormLabel\";\nimport { APP_ROUTES } from \"../../../../contants/RoutesEnum\";\nimport TextButton from \"../../../components/Buttons/TextButton\";\nimport SvgConverter from \"./../../../components/Common/SvgConverter\";\nimport { ReactComponent as DeleteIcon } from \"./../../../../assets/icons/delete-icon.svg\";\nimport { ReactComponent as ExportIcon } from \"./../../../../assets/icons/export-icon.svg\";\nimport NXPRoutingGuideOrderByFilter from \"./Component/Header/NXPRoutingGuideOrderByFilter\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport CommonModal from \"../../../components/Modals/CommonModal\";\nimport FiledCard from \"../../../components/Cards/FiledCard\";\nimport Files from \"react-files\";\nimport HiddenFormInput from \"../../../components/Inputs/HiddenFormInput\";\nimport {\n  postSaveFileEffect,\n  routingGuideFileUploadEffect,\n} from \"../../../../redux/RoutingGuide/RoutingGuideEffects\";\nimport {\n  getErrorMessageFromAPI,\n  triggerNotification,\n} from \"../../../../utilz/utilz\";\nimport { NOTIFICATION_TYPES } from \"../../../../contants/common\";\nimport { setAppLoader } from \"../../../../redux/common/CommonActions\";\nlet allowedExtentions = [\n  \".xls\",\n  \".xlsx\"\n]\n\nfunction NXPRoutingGuideHeader() {\n  const { nxpUserSearchList } = useSelector((state) => state.routingGuide);\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const findSelectedItem = nxpUserSearchList.data.filter(\n    (item) => item?.isChecked === true\n  );\n  const [form] = Form.useForm();\n  const [file, setFile] = useState(false);\n  const fileName = Form.useWatch(\"file\", form);\n  const [isFileUploadClicked, setIsFileUploadClicked] = useState(false);\n  const notificationAPI = useSelector((state) => state.common.notificationAPI);\n\n  const dispatch = useDispatch();\n\n\n\n  const selectAllHandler = (val) => {\n    dispatch(setNXPUserSelectedRecord(val.target.checked));\n  };\n\n  const handleUploadFileSubmit = async (data) => {\n    const formData = new FormData();\n    if (file) {\n      formData.append(\"files\", file);\n    }\n    dispatch(setAppLoader(true));\n    try {\n      await postSaveFileEffect(formData);\n      triggerNotification(notificationAPI, {\n        type: NOTIFICATION_TYPES.SUCCESS,\n        title: \"Routing Guide Upload Document Successfully.\",\n      });\n      dispatch(setAppLoader(false));\n      setIsFileUploadClicked(false);\n    } catch (error) {\n      let msg = getErrorMessageFromAPI(error);\n      dispatch(setAppLoader(false));\n      triggerNotification(notificationAPI, {\n        type: NOTIFICATION_TYPES.ERROR,\n        title: msg,\n      });\n    }\n  };\n\n  const handleFileChange = (files) => {\n    try {\n      if (files.length > 0) {\n        setFile(files[0]);\n        form.setFieldsValue({ file: files[0].name });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleFileError = (error) => {\n    try {\n      if (error) {\n        form.setFields([\n          {\n            name: \"file\",\n            errors: [error.message],\n          },\n        ]);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Row justify=\"space-between\" className={`py-15 px-14 align=\"middle`}>\n        <Col className=\"flex-1\">\n          <Row align={\"middle\"} gutter={20}>\n            <Col sm={12}>\n              <div className=\"d-flex gap-1\">\n                {/* <FormCheckBox\n                  className={`m-0`}\n                  checkBoxClass=\"normal-checkbox\"\n                  onChange={selectAllHandler}\n                  checked={\n                    nxpUserSearchList.data.length > 0 &&\n                    nxpUserSearchList.data.length === findSelectedItem.length\n                  }\n                  label={\n                    <FormLabel className=\"white-space-nowrap\">\n                      {t(\"translation:default.fields.selectAll\")}\n                    </FormLabel>\n                  }\n                /> */}\n                <NXPRoutingGuideOrderByFilter />\n              </div>\n            </Col>\n\n            <Col sm={12}>\n              <div className=\"d-flex justify-content-end gap-1 align-items-center\">\n                <TextButton\n                  icon={<UploadOutlined />}\n                  onClick={() => {\n                    form.setFieldValue(\"file\", \"\");\n                    setIsFileUploadClicked(true);\n                  }}\n                >\n                  <label className=\"ml-5\">{\"Upload\"}</label>\n                </TextButton>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <CommonModal\n        className=\"vw-30 h-30\"\n        open={isFileUploadClicked}\n        title={`File Upload`}\n        okText={\"Upload\"}\n        cancelText={t(\"translation:default.buttons.cancel\")}\n        onCancel={() => {\n          setIsFileUploadClicked(false);\n        }}\n        onClose={() => {\n          setIsFileUploadClicked(false);\n        }}\n        onOk={() => form.submit()}\n      >\n        <Form\n          onFinish={(data) => handleUploadFileSubmit(data)}\n          form={form}\n          initialValues={{}}\n        >\n          <div className={`d-flex gap-1 align-items-center h-100 pt-30`}>\n            <Fragment>\n              <FiledCard\n                title={\"Select File\"}\n                textClass={\"d-flex align-items-center gap-1\"}\n              >\n                <Files\n                  className=\"files-dropzone\"\n                  onChange={handleFileChange}\n                  onError={handleFileError}\n                   accepts={allowedExtentions}\n                  multiple={false}\n                  // maxFileSize={10000000}\n                  minFileSize={0}\n                  clickable\n                >\n                  <Button className=\"auction-btn w-100 border-radion-5 white-font\">\n                    {t(\"translation:default.documentManager.chooseFile\")}\n                  </Button>\n                </Files>\n\n                <HiddenFormInput\n                  name=\"file\"\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\n                        \"translation:default.documentManager.chooseFileMessage\"\n                      ),\n                    },\n                    () => ({\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.resolve();\n                        }\n                        let extension = value.match(/\\.([^.]+)$/)[1];\n                        extension = `.${extension}`;\n                        if (allowedExtentions.includes(extension)) {\n                          return Promise.resolve();\n                        } else if (!allowedExtentions.includes(extension)) {\n                          return Promise.reject(\n                            new Error(\n                              `${t(\n                                \"translation:default.documentManager.only\"\n                              )} ${allowedExtentions.join(\",\")} ${t(\n                                \"translation:default.documentManager.filesAreAllowed\"\n                              )} `\n                            )\n                          );\n                        }\n                      },\n                    }),\n                  ]}\n                />\n              </FiledCard>\n              <label className=\"f-14 fw-600\">{fileName}</label>\n            </Fragment>\n          </div>\n        </Form>\n      </CommonModal>\n    </Fragment>\n  );\n}\n\nexport default NXPRoutingGuideHeader;\n","import { Col, Form, Row } from \"antd\";\nimport React, { useMemo } from \"react\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport CountrySelector from \"../../../../../components/Selectors/CountrySelector\";\nimport FormInput from \"../../../../../components/Inputs/FormInput\";\nimport NXPClientCodeSelector from \"../../../User/Component/NXPClientCodeSelector\";\nimport WeightUomSelector from \"../../../../../components/Selectors/WeightUomSelector\";\n\n\nfunction NXPRoutingGuideSearchForm({ form }) {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n\n  return (\n    <Row className=\"pt-10\">\n      <Col sm={24}>\n        <CountrySelector\n          name={\"OriginCountryCode\"}\n          label=\"Origin Country\"\n          className=\"mb-15\"\n          rules={[\n            {\n              required: true,\n              message: \"\",\n            },\n          ]}\n        />\n      </Col>\n      <Col sm={24}>\n        <FormInput\n          label={\"Weight\"}\n          editMode={true}\n          margin={\"mb-15\"}\n          name={\"weight\"}\n          rules={[\n            {\n              required: true,\n              message: \"\",\n            },\n            () => ({\n              validator(_, value) {\n                if (isNaN(value)) {\n                  return Promise.reject(\n                    \"The weight should be a numerical value.\"\n                  );\n                } else {\n                  if (value < 1) {\n                    return Promise.reject(\n                      \"The weight should be greater than zero\"\n                    );\n                  }\n                }\n\n                return Promise.resolve();\n              },\n            }),\n          ]}\n          disableValidation={false}\n          maxLength={\"9\"}\n        />\n      </Col>\n      <Col sm={24}>\n        <NXPClientCodeSelector\n          margin={\"mb-15\"}\n          editMode={true}\n          label={\"Client Code\"}\n          name={\"ClientCode\"}\n        />\n      </Col>\n      <Col sm={24}>\n        <CountrySelector\n          name={\"DestinationCountryCode\"}\n          label=\"Destination Country\"\n          rules={[\n            {\n              required: true,\n              message: \"\",\n            },\n          ]}\n        />\n      </Col>\n      <Col sm={24}>\n        <WeightUomSelector\n          isDefault={true}\n          name=\"WeightUOM\"\n          label={\"Weight UOM\"}\n          placeholder={\"Weight UOM\"}\n          margin={\"mb-15\"}\n          editMode={true}\n          rules={[\n            {\n              required: true,\n              message: \"\",\n            },\n          ]}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default NXPRoutingGuideSearchForm;\n","import { Collapse } from \"antd\";\nimport { useMemo, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport NXPRoutingGuideSearchForm from \"./NXPRoutingGuideSearchForm\";\n\nconst { Panel } = Collapse;\nfunction NXPRoutingGuideFilterContent({ form }) {\n    const [activeKey, setActiveKey] = useState(\"1\");\n    const { pathname: activeTab } = useLocation();\n    const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n    const { t } = useTranslation([namespace, 'translation']);\n  \n    const handleTabClick = (keys) => {\n      if (keys && keys[1]) {\n        setActiveKey(keys[1]);\n      } else {\n        setActiveKey(\"\");\n      }\n    };\n\n    return (\n        <Collapse\n          ghost\n          className=\"filter-collapse-container px-16\"\n          activeKey={activeKey}\n          onChange={handleTabClick}\n        >\n          <Panel header={'Routing Guide Search'} key=\"1\">\n            <NXPRoutingGuideSearchForm form={form} />\n          </Panel>\n         \n        </Collapse>\n      );\n}\nexport default NXPRoutingGuideFilterContent;","import { Col, Form, Row } from \"antd\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"../../../components/Buttons/Button\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport NXPRoutingGuideFilterContent from \"./Component/Search/NXPRoutingGuideFilterContent\";\r\nimport { getRoutingGuidelist, getRoutingGuidelistReset } from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\r\n\r\nfunction NXPRoutingGuideFilter() {\r\n  const [form] = Form.useForm();\r\n  const { pathname: activeTab } = useLocation();\r\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\r\n  const { t } = useTranslation([namespace, \"translation\"]);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearchFormHandler = (data) => {\r\n    dispatch(getRoutingGuidelistReset());\r\n    dispatch(\r\n      getRoutingGuidelist({\r\n        ...data,\r\n        userType:\"Nxp\",\r\n        PageSize: 10,\r\n        PageNo: 1,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-direction-column overflow-hidden h-100 br-4\">\r\n      <div className=\"custom-scroll-bar overflow-x-hidden mb-15 flex-1\">\r\n        <Form\r\n          onFinish={onSearchFormHandler}\r\n          form={form}\r\n          initialValues={{\r\n           \r\n          }}\r\n        >\r\n          <NXPRoutingGuideFilterContent form={form} />\r\n        </Form>\r\n      </div>\r\n      <Row className=\"px-15\" gutter={15}>\r\n        <Col sm={24} md={12}>\r\n          <Button\r\n            fullWidth={true}\r\n            type={\"default\"}\r\n            onClick={() => form.resetFields()}\r\n            buttonType=\"button\"\r\n          >\r\n            {t(\"translation:default.buttons.clear\")}\r\n          </Button>\r\n        </Col>\r\n        <Col sm={24} md={12}>\r\n          <Button\r\n            fullWidth={true}\r\n            type={\"primary\"}\r\n            onClick={() => form.submit()}\r\n            buttonType=\"submit\"\r\n          >\r\n            {t(\"translation:default.buttons.search\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\nexport default NXPRoutingGuideFilter;\r\n","import React, { Fragment, useMemo, useState } from \"react\";\nimport { Checkbox, Col, Dropdown, Form, Menu, Row } from \"antd\";\n\n//import { ReactComponent as MoreIcon } from \"./../../../../../assets/icons/dots-v.svg\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport Paper from \"../../../../../components/Paper/Paper\";\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\nimport FiledCard from \"../../../../../components/Cards/FiledCard\";\nimport PrimaryLabel from \"../../../../../components/Labels/PrimaryLabel\";\nimport Button from \"../../../../../components/Buttons/Button\";\nimport IconButton from \"../../../../../components/Buttons/IconButton\";\nimport { ReactComponent as MoreIcon } from \"./../../../../../../assets/icons/dots-v.svg\";\n\nfunction NXPRoutingGuideDetailCard({ data, onClickContent = () => {} }) {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const [routingGuideModel, setRoutingGuideModel] = useState(false);\n\n  return (\n    <Paper className={`shipment-card border-muted`}>\n      <div className=\"pt-15 pb-15\">\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={\"Transportation Provider\"}>\n              <PrimaryLabel normal={true}>{data.firstCarrierName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard\n              title={'Transportation Provider Service'}\n            >\n              <PrimaryLabel normal={true}>{data.firstCarrierServiceDesc}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={'Client Code'}>\n              <PrimaryLabel normal={true}>{data.clientCodeDesc}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={'Account Number'}>\n              <PrimaryLabel normal={true}>{data.accountNumber}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n        </Row>\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={'Comment'}>\n              <PrimaryLabel normal={true}>{data.comment}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={'Contact Name'}>\n              <PrimaryLabel normal={true}>{data.carrierContactName}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={'Phone Number'}>\n              <PrimaryLabel normal={true}>{data.carrierPhoneNumber}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          <Col sm={6}>\n            <FiledCard title={'Email'}>\n              <PrimaryLabel normal={true}>{data.carrierEmail}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n        </Row>\n        <Row className=\"mb-15 px-15\" gutter={15}>\n          <Col sm={6}>\n            <FiledCard title={'CCEmail'}>\n              <PrimaryLabel normal={true}>{data.carrierCCEmail}</PrimaryLabel>\n            </FiledCard>\n          </Col>\n          \n        </Row>\n      </div>\n    </Paper>\n  );\n}\nexport default NXPRoutingGuideDetailCard;\n","import React, { Fragment, useMemo } from \"react\";\nimport { Col, Row, Spin } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { routeFileSelector } from \"../../../../utilz/i18n\";\nimport NXPRoutingGuideDetailCard from \"./Component/DetailCard/NXPRoutingGuideDetailCard\";\nimport ScrollPagination from \"../../../components/Paginations/ScrollPagination\";\nimport EmptyRecords from \"../../../components/Common/EmptyRecords\";\nimport { getRoutingGuidelist } from \"../../../../redux/RoutingGuide/RoutingGuideAction\";\n\nfunction NXPRoutingGuideContent() {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const dispatch = useDispatch();\n  const { routingGuideDetails } = useSelector((state) => state.routingGuide);\n\n  const handleLoadMore = () => {\n    dispatch(\n      getRoutingGuidelist({\n        ...routingGuideDetails.req,\n        PageNo: routingGuideDetails.req.PageNo + 1,\n      })\n    );\n  };\n\n  const showEmptyRecords =\n    !routingGuideDetails.progressing && routingGuideDetails?.data?.length === 0;\n\n  return (\n    <Fragment>\n      {routingGuideDetails.progressing &&\n        routingGuideDetails?.data?.length === 0 && (\n          <Spin\n            className=\"d-flex justify-content-center align-items-center h-100\"\n            size=\"large\"\n            tip={t(\"translation:default.loading\")}\n            spinning={routingGuideDetails.progressing}\n          />\n        )}\n      {showEmptyRecords && <EmptyRecords />}\n      {routingGuideDetails?.data?.length > 0 && (\n        <Row gutter={15} className={\"h-100 overflow-y-inherit mt-15\"}>\n          <Col sm={24} className={\"h-100 pb-15 overflow-y-inherit\"}>\n            <div className=\"h-100 overflow-y-inherit\">\n              <ScrollPagination\n                className={`${\n                  routingGuideDetails?.data?.length > 0 ? \"mb-15\" : \"pb-15\"\n                } h-100`}\n                loadMore={handleLoadMore}\n                hasMore={\n                  routingGuideDetails?.progressing\n                    ? false\n                    : routingGuideDetails?.data?.length <\n                      routingGuideDetails?.totalCount\n                }\n                isLoading={\n                  routingGuideDetails.progressing &&\n                  routingGuideDetails.data.length > 0\n                }\n                scrollOffset={100}\n              >\n                {routingGuideDetails?.data?.map((data, index) => (\n                  <NXPRoutingGuideDetailCard key={index} data={data} />\n                ))}\n              </ScrollPagination>\n            </div>\n          </Col>\n        </Row>\n      )}\n    </Fragment>\n  );\n}\n\nexport default NXPRoutingGuideContent;\n","import React, { Fragment, useEffect, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport WithFilter from \"../../screens/common/WithFilter\";\nimport { routeFileSelector } from \"../../../utilz/i18n\";\nimport { Tabs } from \"antd\";\nimport { APP_ROUTES } from \"../../../contants/RoutesEnum\";\nimport RoutingGuideHomeContent from \"../../screens/NXPRoutingGuide/Home/RoutingGuideHomeContent\";\nimport RoutingGuideUserHeader from \"../../screens/NXPRoutingGuide/User/RoutingGuideUserHeader\";\nimport RoutingGuideUserFilter from \"../../screens/NXPRoutingGuide/User/RoutingGuideUserFilter\";\nimport RoutingGuideUserContent from \"../../screens/NXPRoutingGuide/User/RoutingGuideUserContent\";\nimport NXPRoutingGuideHeader from \"../../screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideHeader\";\nimport NXPRoutingGuideFilter from \"../../screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideFilter\";\nimport NXPRoutingGuideContent from \"../../screens/NXPRoutingGuide/RoutingGuide/NXPRoutingGuideContent\";\n\nconst NXPRoutingGuidePage = () => {\n  const { pathname: activeTab } = useLocation();\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\n  const { t } = useTranslation([namespace, \"translation\"]);\n  const navigate = useNavigate();\n\n\n  return (\n    <Fragment>\n      \n        <Tabs\n          className=\"page-level-tab-container\"\n          onChange={(key) => navigate(key)}\n          activeKey={activeTab}\n        >\n          <Tabs.TabPane key={APP_ROUTES.ROUTING_GUIDE} tab={\"Home\"}>\n            <WithFilter contentElement={<RoutingGuideHomeContent />} />\n          </Tabs.TabPane>\n          <Tabs.TabPane key={APP_ROUTES.ROUTING_GUIDE_USER} tab={\"User\"}>\n            <WithFilter\n              headerContent={<RoutingGuideUserHeader />}\n              filterTitle={t(\"translation:default.buttons.search\")}\n              filterElement={<RoutingGuideUserFilter />}\n              contentElement={<RoutingGuideUserContent />}\n              pageTitle={\"User\"}\n            />\n          </Tabs.TabPane>\n          <Tabs.TabPane key={APP_ROUTES.NXP_ROUTING_GUIDE} tab={\"Routing Guide\"}>\n            \n            <WithFilter\n              headerContent={<NXPRoutingGuideHeader />}\n              filterTitle={t(\"translation:default.buttons.search\")}\n              filterElement={<NXPRoutingGuideFilter />}\n              contentElement={<NXPRoutingGuideContent />}\n              pageTitle={t(\"translation:default.options.routingGuide\")}\n            />\n          </Tabs.TabPane>\n        </Tabs>\n      \n    </Fragment>\n  );\n};\n\nexport default NXPRoutingGuidePage;\n","import React from \"react\";\nimport { Form, Input } from \"antd\";\nimport { isRequiredField } from \"../../../utilz/utilz\";\n\nconst FormInputPassword = ({\n  placeholder = \"\",\n  label,\n  editMode = false,\n  forFilter = false,\n  margin = \"mb-15\",\n  singleLineMode = false,\n  name = `testFiled-${Math.random()}`,\n  rules = [],\n  colon = false,\n  inverMode = false,\n}) => {\n  return (\n    <>\n      <Form.Item\n        className={`${inverMode ? \"invert-mode\" : \"\"} ${margin} ${\n          singleLineMode ? \"single-line-mode\" : \"\"\n        } form-input-container form-input-password ${\n          !editMode ? \"edit-mode-off\" : \"\"\n        }`}\n        name={name}\n        rules={rules}\n        {...(label\n          ? {\n              label: (\n                <span>\n                  {label}\n                  {rules.length > 0 && isRequiredField(rules) && (\n                    <span className=\"required\">*</span>\n                  )}\n                </span>\n              ),\n            }\n          : {})}\n        labelCol={10}\n        colon={colon}\n      >\n        <Input.Password\n          readOnly={!editMode}\n          placeholder={placeholder}\n          className={`${forFilter ? \"filter-input\" : \"form-input\"} `}\n          id={name}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default FormInputPassword;\n","import { Col, Form, Row, Button } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { t } from \"i18next\";\r\nimport FormInput from \"../../../../../components/Inputs/FormInput\";\r\nimport NXPUserTypeSelector from \"../NXPUserTypeSelector\";\r\nimport CountrySelector from \"./../../../../../components/Selectors/CountrySelector\";\r\nimport StateSelector from \"./../../../../../components/Selectors/StateSelector\";\r\nimport CitySelector from \"./../../../../../components/Selectors/CitySelector\";\r\nimport FormInputPassword from \"./../../../../../components/Inputs/FormInputPassword\";\r\nimport NXPClientCodeSelector from \"../NXPClientCodeSelector\";\r\nimport PostalCodeInput from \"./../../../../../components/Selectors/PostalCodeInput\";\r\n\r\nconst NpxUserInformationForm = ({ form, selectedItems = {} }) => {\r\n  const countryCode = Form.useWatch(\"CountryCode\", form);\r\n  const state = Form.useWatch(\"State\", form);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(selectedItems).length > 0) {\r\n      form.setFieldsValue({\r\n        UserNameInput: selectedItems?.userName || \"\",\r\n        UserTypeId: selectedItems?.userTypeId || \"\",\r\n        FirstName: selectedItems?.firstName || \"\",\r\n        LastName: selectedItems?.lastName || \"\",\r\n        Email: selectedItems?.email || \"\",\r\n        CompanyName: selectedItems?.companyName || \"\",\r\n        ClientCode: selectedItems?.clientCode?.trim() || \"\",\r\n        CountryCode: selectedItems?.countryCode?.trim() || \"\",\r\n        State: selectedItems?.state?.trim() || \"\",\r\n        City: selectedItems?.city?.trim() || \"\",\r\n        PostalCode: selectedItems?.postal?.trim() || \"\",\r\n        Password: selectedItems?.password?.trim() || \"\",\r\n      });\r\n    }\r\n  }, [selectedItems]);\r\n\r\n  const handleZipDetails = (data) => {\r\n    if (data) {\r\n      form.setFieldsValue({\r\n        State: data?.state?.trim(),\r\n        City: data?.city?.trim(),\r\n        CountryCode: data?.countryCode?.trim(),\r\n        PostalCode: data?.zip?.trim(),\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeCountryHandler = () => {\r\n    form.setFieldsValue({\r\n      State: undefined,\r\n      City: undefined,\r\n      PostalCode: undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form form={form} initialValues={{ editMode: false }}>\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"User Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"UserNameInput\"}\r\n            placeholder={\"User Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"User name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <NXPUserTypeSelector\r\n            margin={\"mb-15\"}\r\n            editMode={true}\r\n            label={t(\"translation:default.fields.userType.label\")}\r\n            name={\"UserTypeId\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"User Type is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"First Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"FirstName\"}\r\n            placeholder={\"First Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"First Name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <FormInput\r\n            label={\"Last Name\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"LastName\"}\r\n            placeholder={\"Last Name\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Last Name is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"Email\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"Email\"}\r\n            placeholder={\"Email\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Email is required\",\r\n              },\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  const validateEmail = (email) => {\r\n                    return String(email)\r\n                      .toLowerCase()\r\n                      .match(\r\n                        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n                      );\r\n                  };\r\n                  if (validateEmail(value)) {\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.reject(\r\n                      new Error(\"Please enter the correct email address\")\r\n                    );\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <FormInputPassword\r\n            label={\"Password\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"Password\"}\r\n            placeholder={\"Password\"}\r\n            maxLength={16}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Password is required\",\r\n              },\r\n              () => ({\r\n                validator(_, value) {\r\n                  if (!value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  \r\n                  if (value.length <= 16) {\r\n                    return Promise.resolve();\r\n                  } else {\r\n                    return Promise.reject(\r\n                      new Error(\"Password max length is 16\")\r\n                    );\r\n                  }\r\n                },\r\n              })\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <FormInput\r\n            label={\"Company\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"CompanyName\"}\r\n            placeholder={\"Company\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Company is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <NXPClientCodeSelector\r\n            margin={\"mb-15\"}\r\n            editMode={true}\r\n            label={\"Client Code\"}\r\n            name={\"ClientCode\"}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Client is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row gutter={15}>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <CountrySelector\r\n            name={\"CountryCode\"}\r\n            onChange={onChangeCountryHandler}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Country is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <StateSelector\r\n            name={\"State\"}\r\n            countryCode={countryCode}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"State is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6} className=\"pl-15 pr-15\">\r\n          <CitySelector\r\n            label={\"City\"}\r\n            editMode={true}\r\n            margin={\"mb-15\"}\r\n            name={\"City\"}\r\n            placeholder={t(\"translation:default.fields.city.placeholder\")}\r\n            countryCode={countryCode}\r\n            stateCode={state}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"City is required\",\r\n              },\r\n            ]}\r\n          />\r\n        </Col>\r\n        <Col sm={6}>\r\n          <PostalCodeInput\r\n            label={t(\"translation:default.fields.postalCode.label\")}\r\n            margin={\"mb-15\"}\r\n            name={`PostalCode`}\r\n            placeholder={t(\"translation:default.fields.postalCode.placeholder\")}\r\n            editMode={true}\r\n            handleZipDetails={handleZipDetails}\r\n            countryCode={countryCode}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NpxUserInformationForm;\r\n","import { Col, Form, Row } from \"antd\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport SvgConverter from \"../../../../../components/Common/SvgConverter\";\r\nimport { ReactComponent as RoutingGuideIcon } from \"./../../../../../../assets/icons/file-fold.svg\";\r\nimport { ReactComponent as TruckIcon } from \"./../../../../../../assets/icons/truck.svg\";\r\nimport CollapsiblePanel from \"../../../../../components/Tabs/CollapsiblePanel\";\r\nimport { routeFileSelector } from \"../../../../../../utilz/i18n\";\r\nimport FormSelectBox from \"../../../../../components/Inputs/FormSelectBox\";\r\nimport { NXP_STATUS_OPTIONS, STATUS_OPTIONS } from \"../../../../../../contants/common\";\r\nimport NpxUserInformationForm from \"./AddUserInformation\";\r\n\r\nconst AddNxpUserTabs = ({ routingGuideForm, activeKey, setActiveKey, selectedItems = {} }) => {\r\n  const { pathname: activeTab } = useLocation();\r\n  const namespace = useMemo(() => routeFileSelector(activeTab), [activeTab]);\r\n  const { t } = useTranslation([namespace, \"translation\"]);\r\n  const GenerateTitle = ({ title, Icon, size = 25 }) => {\r\n    return (\r\n      <Row gutter={10} align={\"middle\"}>\r\n        <Col className=\"lh-0\">\r\n          <SvgConverter width={size} height={size} Icon={Icon} />\r\n        </Col>\r\n        <Col className=\"lh-0\">\r\n          <label className=\"lh-0 text-dark cursor-pointer\">{title}</label>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CollapsiblePanel\r\n      forceRender={true}\r\n      handleTabClick={(keys) => setActiveKey(keys)}\r\n      activeKey={activeKey}\r\n      tabs={[\r\n        {\r\n          tabKey: \"1\",\r\n          content: <NpxUserInformationForm form={routingGuideForm} selectedItems={selectedItems}/>,\r\n          header: (\r\n            <GenerateTitle\r\n              title={t(\"translation:shipmentAdd.titles.transportation\")}\r\n              Icon={TruckIcon}\r\n              size={25}\r\n            />\r\n          ),\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddNxpUserTabs;\r\n","import React, { useEffect, useState } from \"react\";\nimport i18n from 'i18next';\nimport { getNXPClientCodeEffect } from \"../../../../../redux/RoutingGuide/RoutingGuideEffects\";\nimport FormSelectBox from \"../../../../components/Inputs/FormSelectBox\";\n\nconst NXPClientCodeSelector = ({\n  placeholder = \"Client Code\",\n  label = \"Client Code\",\n  rules = [],\n  name,\n  editMode,\n  margin=\"mb-0\"\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getClientCodeList();\n  }, []);\n\n  const getClientCodeList = async () => {\n    try {\n      setLoading(true);\n      const { data } = await getNXPClientCodeEffect();\n      let options = data.map((row) => ({\n        label: row.text,\n        value: row.value,\n      }));\n      setOptions(options);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={[{ label: \"Select\", value: \"\" }, ...options]}\n      placeholder={placeholder}\n      label={label}\n      margin={margin}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n    />\n  );\n};\n\nexport default NXPClientCodeSelector;\n","import React, { useEffect, useState } from \"react\";\nimport i18n from 'i18next';\nimport { getNXPUserTypesEffect } from \"../../../../../redux/RoutingGuide/RoutingGuideEffects\";\nimport FormSelectBox from \"../../../../components/Inputs/FormSelectBox\";\n\nconst NXPUserTypeSelector = ({\n  placeholder = i18n.t('translation:default.fields.userType.placeholder'),\n  label = i18n.t('translation:default.fields.userType.label'),\n  rules = [],\n  name,\n  editMode,\n  margin\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getStatusList();\n  }, []);\n\n  const getStatusList =  async() => {\n    try {\n      setLoading(true);\n      const { data } = await getNXPUserTypesEffect();\n      let options = data.map((row) => ({\n        label: row.text,\n        value: row.value,\n      }));\n      setOptions(options);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n  \n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={[{ label: \"Select\", value: \"\" }, ...options]}\n      placeholder={placeholder}\n      label={label}\n      margin={margin}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n    />\n  );\n};\n\nexport default NXPUserTypeSelector;\n"],"names":["_ref","title","children","labelClass","textClass","childClassName","_jsxs","className","concat","_jsx","Typography","Text","value","onChange","editorReady","setEditorReady","useState","Spin","spinning","CKEditor","editor","ClassicEditor","data","String","onReady","event","getData","config","fontFamily","options","toolbar","items","language","image","table","contentToolbar","updateContentHandler","setValue","editDocument","setEditDocument","useEffect","content","Fragment","Row","Col","sm","Button","onClick","htmlType","disabled","SaveCancelButtons","onSave","contentId","onCancel","TextEditor","dangerouslySetInnerHTML","__html","_nxpHomeContent$data4","_nxpHomeContent$data5","activeKey","setActiveKey","namespace","useMemo","routeFileSelector","t","useTranslation","dispatch","useDispatch","nxpHomeContent","nxpUpdateHomeContent","useSelector","state","routingGuide","componentList","setComponentList","_nxpHomeContent$data","_nxpHomeContent$data$","dashBoardContent","length","_nxpHomeContent$data2","_nxpHomeContent$data3","temp","map","item","index","push","NPXContentEditor","header","contentHeader","_nxpUpdateHomeContent","status","getContentNXPRoutingGuideInProgress","updateContentNXPRoutingGuideInProgress","CollapsiblePanel","forceRender","handleTabClick","keys","showArrow","tabs","form","findSelectedItem","visibilityInfoAll","setVisibilityInfoAll","routingGuideUserFields","label","name","selectedObjVal","setSelectedObjVal","nxpUserSearchList","api","contextHolder","notification","useNotification","pathname","activeTab","useLocation","handleSelectAll","forEach","_ref2","setFieldValue","generateExportValuesWithFields","columns","rows","row","arr","_ref3","Object","hasOwnProperty","call","_ref4","exportShipmentListToExcel","Form","onFinish","selectedFields","omitBy","val","selectedObj","filter","cloneDeep","FilterCard","showBorder","FormCheckBox","checkBoxClass","checked","e","target","lg","NXPRoutingGuideUserOrderByFilter","useForm","OrderASC","useWatch","OrderBy","getNXPUserSearchInClearData","getNXPUserSearchInProgress","OrderByColumn","OrderBySort","PageNo","initialValues","SORTING_ORDERS","ASC","align","gutter","FormSelectBox","NXP_SORTING_FIELDS_ROUTING_GUIDE_USER_ORDER","margin","placeholder","IconButton","oldType","DESC","SvgConverter","Icon","FilterAscIcon","FilterDescIcon","height","width","HiddenFormInput","exportModal","setExportModal","SelectedObjVal","exportForm","isChecked","justify","setNXPUserSelectedRecord","FormLabel","Link","to","APP_ROUTES","ADD_NXP_USER","Popconfirm","placement","onConfirm","handleDelete","records","userId","deleteRoutingUserInProgress","okText","cancelText","overlayClassName","TextButton","icon","DeleteIcon","ExportIcon","exportRoutingGuideData","CommonModal","open","onClose","onOk","submit","RoutingUserExportForm","FormInput","editMode","STATUS_OPTIONS","NPXUserTypesSelector","NXPClientCodeSelector","Panel","Collapse","ghost","UserSearch","CompanyName","UserStatus","ClientCode","UserName","UserType","RoutingGuideUserFilterContent","md","fullWidth","type","resetFields","buttonType","onClickContent","Paper","stopPropagation","Checkbox","userName","FiledCard","PrimaryLabel","normal","userTypeDesc","firstName","lastName","companyName","clientCodeDesc","countryName","stateName","city","userStatus","email","Dropdown","overlay","Menu","key","size","shape","MoreIcon","_nxpUserSearchList$da","_nxpUserSearchList$da2","_nxpUserSearchList$da3","createRoutingGuideUser","deleteNxpUser","showModal","setShowModal","selectedUserItem","setSelectedUserItem","routingGuideForm","getNXPUserSearchResetRequest","createRoutingGuideUserInClear","_deleteNxpUser$data","request","deleteRoutingUserInSuccess","onSelectedItemHandler","progressing","EmptyRecords","ScrollPagination","loadMore","handleLoadMore","hasMore","totalCount","isLoading","scrollOffset","RoutingGuideUserDetailCard","Drawer","visible","onCloseDrawer","headerContents","contentClassName","Provider","onFormFinish","async","submittedForm","formValues","getFieldsValue","payload","UserNameInput","createRoutingGuideUserInProgress","error","console","log","ToggleSwitch","checkedChildren","unCheckedChildren","AddNxpUserTabs","selectedItems","NXPRoutingGuideOrderByFilter","getRoutingGuidelistReset","getRoutingGuidelist","PageSize","NXP_SORTING_FIELDS_ROUTING_GUIDE_ORDER","allowedExtentions","file","setFile","fileName","isFileUploadClicked","setIsFileUploadClicked","notificationAPI","common","UploadOutlined","formData","FormData","append","setAppLoader","postSaveFileEffect","triggerNotification","NOTIFICATION_TYPES","SUCCESS","msg","getErrorMessageFromAPI","ERROR","handleUploadFileSubmit","Files","files","setFieldsValue","onError","setFields","errors","message","accepts","multiple","minFileSize","clickable","rules","required","validator","_","Promise","resolve","extension","match","includes","reject","Error","join","CountrySelector","isNaN","disableValidation","maxLength","WeightUomSelector","isDefault","NXPRoutingGuideSearchForm","userType","NXPRoutingGuideFilterContent","routingGuideModel","setRoutingGuideModel","firstCarrierName","firstCarrierServiceDesc","accountNumber","comment","carrierContactName","carrierPhoneNumber","carrierEmail","carrierCCEmail","_routingGuideDetails$","_routingGuideDetails$2","_routingGuideDetails$3","_routingGuideDetails$4","_routingGuideDetails$5","_routingGuideDetails$6","routingGuideDetails","showEmptyRecords","tip","req","NXPRoutingGuideDetailCard","NXPRoutingGuidePage","navigate","useNavigate","Tabs","TabPane","tab","WithFilter","contentElement","RoutingGuideHomeContent","ROUTING_GUIDE","headerContent","RoutingGuideUserHeader","filterTitle","filterElement","RoutingGuideUserFilter","RoutingGuideUserContent","pageTitle","ROUTING_GUIDE_USER","NXPRoutingGuideHeader","NXPRoutingGuideFilter","NXPRoutingGuideContent","NXP_ROUTING_GUIDE","forFilter","singleLineMode","Math","random","colon","inverMode","_Fragment","Item","isRequiredField","labelCol","Input","Password","readOnly","id","countryCode","_selectedItems$client","_selectedItems$countr","_selectedItems$state","_selectedItems$city","_selectedItems$postal","_selectedItems$passwo","UserTypeId","userTypeId","FirstName","LastName","Email","clientCode","trim","CountryCode","State","City","PostalCode","postal","password","NXPUserTypeSelector","toLowerCase","FormInputPassword","onChangeCountryHandler","undefined","StateSelector","CitySelector","stateCode","PostalCodeInput","handleZipDetails","_data$state","_data$city","_data$countryCode","_data$zip","zip","GenerateTitle","tabKey","NpxUserInformationForm","TruckIcon","setOptions","loading","setLoading","getClientCodeList","getNXPClientCodeEffect","text","i18n","getStatusList","getNXPUserTypesEffect"],"sourceRoot":""}