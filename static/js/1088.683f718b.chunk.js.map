{"version":3,"file":"static/js/1088.683f718b.chunk.js","mappings":"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","sources":["assets/icons/location-pin-green.svg","views/components/Cards/FiledCard.jsx","views/components/Selectors/CustomerNameSelector.jsx","views/components/Selectors/VisibilityBranchSelector.jsx","../node_modules/@ant-design/icons-svg/es/asn/UploadOutlined.js","../node_modules/@ant-design/icons/es/icons/UploadOutlined.js"],"sourcesContent":["var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLocationPinGreen(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 20,\n    viewBox: \"0 0 16 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.51246 19.7391C7.62113 19.9021 7.8041 20 8 20C8.1959 20 8.37887 19.9021 8.48754 19.7391C9.87422 17.6591 11.9167 15.0903 13.34 12.4778C14.478 10.3889 15.0312 8.60727 15.0312 7.03125C15.0312 3.15422 11.877 0 8 0C4.12297 0 0.96875 3.15422 0.96875 7.03125C0.96875 8.60727 1.52199 10.3889 2.66004 12.4778C4.08227 15.0883 6.12863 17.6634 7.51246 19.7391ZM8 1.17188C11.2309 1.17188 13.8594 3.80039 13.8594 7.03125C13.8594 8.40641 13.3529 10.0046 12.3109 11.9171C11.0841 14.1691 9.33336 16.4534 8 18.3738C6.66684 16.4537 4.91602 14.1692 3.6891 11.9171C2.64715 10.0046 2.14062 8.40641 2.14062 7.03125C2.14062 3.80039 4.76914 1.17188 8 1.17188Z\",\n    fill: \"#0AA45A\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 10.5469C9.93852 10.5469 11.5156 8.96977 11.5156 7.03125C11.5156 5.09273 9.93852 3.51562 8 3.51562C6.06148 3.51562 4.48438 5.09273 4.48438 7.03125C4.48438 8.96977 6.06148 10.5469 8 10.5469ZM8 4.6875C9.29234 4.6875 10.3438 5.73891 10.3438 7.03125C10.3438 8.32359 9.29234 9.375 8 9.375C6.70766 9.375 5.65625 8.32359 5.65625 7.03125C5.65625 5.73891 6.70766 4.6875 8 4.6875Z\",\n    fill: \"#0AA45A\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLocationPinGreen);\nexport default __webpack_public_path__ + \"static/media/location-pin-green.f63881c179a6deef72baca125222c061.svg\";\nexport { ForwardRef as ReactComponent };","import { Typography } from \"antd\";\nimport React from \"react\";\n\nconst FiledCard = ({\n  title,\n  children,\n  labelClass = false,\n  textClass,\n  childClassName,\n}) => {\n  return (\n    <div className={`field-card-container ${textClass}`}>\n      <Typography.Text className={`field-card-title ${labelClass}`}>\n        {title}\n      </Typography.Text>\n      <div className={`content ${childClassName}`}>{children}</div>\n    </div>\n  );\n};\n\nexport default FiledCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getCustomerCompanyListEffect } from \"../../../redux/auction/AuctionEffects\";\nimport { getCustomerName } from \"../../../redux/POV/POVEffects\";\nimport { getCompanyListEffect } from \"../../../redux/auth/AuthEffects\";\nimport FormSelectBox from \"../Inputs/FormSelectBox\";\nimport i18n from 'i18next';\n\nconst CustomerNameSelector = ({\n  placeholder = i18n.t('translation:default.fields.customerName.placeholder'),\n  label = i18n.t('translation:default.fields.customerName.label'),\n  rules = [],\n  name,\n  editMode,\n  margin,\n  readOnly,\n  disabled,\n  mode = \"\",\n  form,\n  id = \"\",\n  setDetafuleValue = false,\n  callbackSetValue = () => {}\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [defaultParams, setDefaultParams] = useState({});\n  const { selectedCompany } = useSelector((state) => state.auth);\n  const {\n    user: { data: userDetails },\n  } = useSelector((state) => state?.auth);\n\n  useEffect(() => {\n    if (selectedCompany && selectedCompany.companyId) {\n      getCustomerNameList(selectedCompany.companyId);\n    }\n    if (userDetails?.userType === \"CUST\") {\n      setDefaultParams({\n        value: selectedCompany?.companyId,\n        label: selectedCompany?.companyName,\n      });\n      if (form) {\n        form.setFieldValue(\"customerKey\", selectedCompany?.companyId);\n      }\n    }\n  }, [selectedCompany, form]);\n\n  const getCustomerNameList = async (companyId) => {\n    try {\n      setLoading(true);\n      let param = {};\n      let result = [];\n      let options = {};\n      if (userDetails?.userType === \"CARR\") {\n        param = { carrierKey: companyId };\n      } else {\n        param = { VendorKey: companyId };\n      }\n\n      if (userDetails?.userType === \"CARR\") {\n        const { data } = await getCustomerCompanyListEffect(param);\n        result = data;\n        options = result.map((row) => ({\n          label: row.customerName,\n          value: row.customerKey,\n        }));\n      } else if (userDetails?.userType === \"CUST\") {\n        const { data } = await getCompanyListEffect();\n        result = data;\n        options = result.map((row) => ({\n          label: row.companyName,\n          value: row.companyId,\n        }));\n      } else {\n        // userDetails?.userType === \"VEND\"\n        const { data } = await getCustomerName(param);\n        result = data;\n        options = result.map((row) => ({\n          label: row.customerName,\n          value: row.customerKey,\n        }));\n      }\n      setOptions(options);\n      if(setDetafuleValue === true){\n        setTimeout(() => {\n          form.setFieldValue(\"customerKey\", options?.[0]?.value);\n          callbackSetValue(options?.[0]?.value);\n        }, 200);\n      }\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={options}\n      placeholder={placeholder}\n      label={label}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n      margin={margin}\n      readOnly={readOnly}\n      disabled={disabled}\n      mode={mode}\n      defaultValue={defaultParams?.label}\n      id={id}\n    />\n  );\n};\n\nexport default CustomerNameSelector;\n","import React, { useEffect, useState } from \"react\";\nimport FormSelectBox from \"../Inputs/FormSelectBox\";\nimport { getVisibilityBranchsEffects } from \"../../../redux/visibility/VisibilityEffects\";\nimport i18n from 'i18next';\n\nconst VisibilityBranchSelector = ({\n  placeholder = i18n.t('translation:default.fields.shipmentBranch.placeholder'),\n  label = i18n.t('translation:default.fields.shipmentBranch.label'),\n  rules = [],\n  name,\n  form = {},\n  customerKey,\n  margin,\n  editMode = true,\n  mode = \"\",\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (customerKey) {\n      getStatusList();\n    }\n  }, [customerKey]);\n\n  const getStatusList = async () => {\n    try {\n      setLoading(true);\n      const { data } = await getVisibilityBranchsEffects({ customerKey });\n      let options = data.map((row) => ({\n        label: row.branchDesc,\n        value: row.branchKey,\n      }));\n\n      setOptions(options);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setOptions([]);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <FormSelectBox\n      loading={loading}\n      options={options}\n      placeholder={placeholder}\n      label={label}\n      margin={margin}\n      rules={rules}\n      name={name}\n      editMode={editMode}\n      form={form}\n      mode={mode}\n    />\n  );\n};\n\nexport default VisibilityBranchSelector;\n","// This icon file is generated automatically.\nvar UploadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"upload\", \"theme\": \"outlined\" };\nexport default UploadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UploadOutlinedSvg from \"@ant-design/icons-svg/es/asn/UploadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar UploadOutlined = function UploadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UploadOutlinedSvg\n  }));\n};\nUploadOutlined.displayName = 'UploadOutlined';\nexport default /*#__PURE__*/React.forwardRef(UploadOutlined);"],"names":["_path","_path2","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgLocationPinGreen","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","ForwardRef","children","labelClass","textClass","childClassName","_jsxs","className","concat","_jsx","Typography","Text","placeholder","i18n","label","rules","name","editMode","margin","readOnly","disabled","mode","form","setDetafuleValue","callbackSetValue","options","setOptions","useState","loading","setLoading","defaultParams","setDefaultParams","selectedCompany","useSelector","state","auth","user","data","userDetails","useEffect","companyId","getCustomerNameList","userType","value","companyName","setFieldValue","async","param","result","carrierKey","VendorKey","getCustomerCompanyListEffect","map","row","customerName","customerKey","getCompanyListEffect","getCustomerName","setTimeout","_options","_options$","_options2","_options2$","error","console","log","FormSelectBox","defaultValue","getStatusList","getVisibilityBranchsEffects","branchDesc","branchKey","UploadOutlined","React","AntdIcon","_objectSpread","icon","UploadOutlinedSvg","displayName"],"sourceRoot":""}